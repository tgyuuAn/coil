{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>An image loading library for Android and Compose Multiplatform. Coil is:</p> <ul> <li>Fast: Coil performs a number of optimizations including memory and disk caching, downsampling the image, automatically pausing/cancelling requests, and more.</li> <li>Lightweight: Coil only depends on Kotlin, Coroutines, and Okio and works seamlessly with Google's R8.</li> <li>Easy to use: Coil's API leverages Kotlin's language features for simplicity and minimal boilerplate.</li> <li>Modern: Coil is Kotlin-first and interoperates with modern libraries including Compose, Coroutines, Okio, Ktor, and OkHttp.</li> </ul> <p>Coil is an acronym for: Coroutine Image Loader.</p> <p>Translations: \u65e5\u672c\u8a9e, \ud55c\uad6d\uc5b4, \u0420\u0443\u0441\u0441\u043a\u0438\u0439, Svenska, T\u00fcrk\u00e7e, \u4e2d\u6587</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Import the Compose library and a networking library:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-compose:3.0.0-rc01\")\nimplementation(\"io.coil-kt.coil3:coil-network-okhttp:3.0.0-rc01\")\n</code></pre> <p>To load an image, use the <code>AsyncImage</code> composable:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"README-ja/","title":"README ja","text":"<p>Coil \u306f Kotlin Coroutines \u3067\u4f5c\u3089\u308c\u305f Android \u7528\u306e\u753b\u50cf\u8aad\u307f\u8fbc\u307f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 Coil \u306f:</p> <ul> <li>\u9ad8\u901f: Coil \u306f\u3001\u30e1\u30e2\u30ea\u3068\u30c7\u30a3\u30b9\u30af\u306e\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0\u3001\u30e1\u30e2\u30ea\u5185\u306e\u753b\u50cf\u306e\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4e00\u6642\u505c\u6b62/\u30ad\u30e3\u30f3\u30bb\u30eb\u306e\u81ea\u52d5\u5316\u306a\u3069\u3001\u591a\u304f\u306e\u6700\u9069\u5316\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u8efd\u91cf: Coil \u306f ~2000 \u306e\u30e1\u30bd\u30c3\u30c9\u3092 APK \u306b\u8ffd\u52a0\u3057\u307e\u3059 (\u3059\u3067\u306b OkHttp \u3068 Coroutines \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u306e\u5834\u5408)\u3002\u3053\u308c\u306f Picasso \u306b\u5339\u6575\u3057\u3001Glide \u3084 Fresco \u3088\u308a\u3082\u5927\u5e45\u306b\u5c11\u306a\u3044\u6570\u3067\u3059\u3002</li> <li>\u4f7f\u3044\u3084\u3059\u3044: Coil \u306e API \u306f\u3001\u30dc\u30a4\u30e9\u30fc\u30d7\u30ec\u30fc\u30c8\u306e\u6700\u5c0f\u5316\u3068\u30b7\u30f3\u30d7\u30eb\u3055\u306e\u305f\u3081\u306b Kotlin \u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u6d3b\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>\u73fe\u4ee3\u7684: Coil \u306f Kotlin \u30d5\u30a1\u30fc\u30b9\u30c8\u3067\u3001Coroutines\u3001OkHttp\u3001Okio\u3001AndroidX Lifecycles \u306a\u3069\u306e\u6700\u65b0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</li> </ul> <p>Coil \u306f Coroutine Image Loader \u306e\u982d\u5b57\u8a9e\u3067\u3059\u3002</p>"},{"location":"README-ja/#_1","title":"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","text":"<p>Coil \u306f <code>mavenCentral()</code> \u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code>implementation(\"io.coil-kt:coil:2.7.0\")\n</code></pre>"},{"location":"README-ja/#_2","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":""},{"location":"README-ja/#imageviews","title":"ImageViews","text":"<p>\u753b\u50cf\u3092 <code>ImageView</code> \u306b\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001 <code>load</code> \u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <pre><code>// URL\nimageView.load(\"https://example.com/image.jpg\")\n\n// File\nimageView.load(File(\"/path/to/image.jpg\"))\n\n// And more...\n</code></pre> <p>Requests \u306f\u3001 trailing lambda \u5f0f\u3092\u4f7f\u7528\u3057\u3066\u8ffd\u52a0\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    crossfade(true)\n    placeholder(R.drawable.image)\n    transformations(CircleCropTransformation())\n}\n</code></pre>"},{"location":"README-ja/#jetpack-compose","title":"Jetpack Compose","text":"<p>Jetpack Compose \u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059:</p> <pre><code>implementation(\"io.coil-kt:coil-compose:2.7.0\")\n</code></pre> <p>\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001<code>AsyncImage</code> composable \u3092\u4f7f\u7528\u3057\u307e\u3059:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"README-ja/#image-loaders","title":"Image Loaders","text":"<p><code>imageView.load</code> \u3068 <code>AsyncImage</code> \u306f\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e <code>ImageLoader</code> \u3092\u4f7f\u7528\u3057\u3066\u753b\u50cf\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e <code>ImageLoader</code> \u306b\u306f <code>Context</code> \u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059:</p> <pre><code>val imageLoader = context.imageLoader\n</code></pre> <p><code>ImageLoader</code> \u306f\u5171\u6709\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u304a\u308a\u3001\u5358\u4e00\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\u30a2\u30d7\u30ea\u5168\u4f53\u3067\u5171\u6709\u3059\u308b\u3068\u6700\u3082\u52b9\u7387\u7684\u3067\u3059\u3002 \u307e\u305f\u3001\u72ec\u81ea\u306e <code>ImageLoader</code> \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059:</p> <pre><code>val imageLoader = ImageLoader(context)\n</code></pre> <p>\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e <code>ImageLoader</code> \u304c\u5fc5\u8981\u306a\u3044\u5834\u5408\u306f\u3001 <code>io.coil-kt:coil</code> \u306e\u4ee3\u308f\u308a\u306b <code>io.coil-kt:coil-base</code> \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"README-ja/#requests","title":"Requests","text":"<p>\u753b\u50cf\u3092\u30ab\u30b9\u30bf\u30e0\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001 <code>ImageRequest</code> \u3092 <code>enqueue</code> \u3057\u3066\u304f\u3060\u3055\u3044:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target { drawable -&gt;\n        // Handle the result.\n    }\n    .build()\nval disposable = imageLoader.enqueue(request)\n</code></pre> <p>\u753b\u50cf\u3092\u547d\u4ee4\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001 <code>ImageRequest</code> \u3092 <code>execute</code> \u3057\u3066\u304f\u3060\u3055\u3044:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <p>\u3053\u3061\u3089\u3067 Coil \u306e\u5b8c\u5168\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"README-ja/#r8-proguard","title":"R8 / Proguard","text":"<p>Coil \u306f R8 \u3068\u5b8c\u5168\u306b\u4e92\u63db\u6027\u304c\u3042\u308a\u3001\u8ffd\u52a0\u306e\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>Proguard\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001Coroutines\u3001OkHttp\u306b\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p>"},{"location":"README-ja/#_3","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"README-ko/","title":"README ko","text":"<p>Coil\uc740 Kotlin Coroutines\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 Android \ubc31\uc564\ub4dc \uc774\ubbf8\uc9c0 \ub85c\ub529 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Coil \uc740:</p> <ul> <li>\ube60\ub974\ub2e4: Coil\uc740 \uba54\ubaa8\ub9ac\uc640 \ub514\uc2a4\ud06c\uc758 \uce90\uc2f1, \uba54\ubaa8\ub9ac\uc758 \uc774\ubbf8\uc9c0 \ub2e4\uc6b4 \uc0d8\ud50c\ub9c1, Bitmap \uc7ac\uc0ac\uc6a9, \uc77c\uc2dc\uc815\uc9c0/\ucde8\uc18c\uc758 \uc790\ub3d9\ud654 \ub4f1\ub4f1 \uc218 \ub9ce\uc740 \ucd5c\uc801\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.</li> <li>\uac00\ubccd\ub2e4: Coil\uc740 \ucd5c\ub300 2000\uac1c\uc758 method\ub4e4\uc744 APK\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4(\uc774\ubbf8 OkHttp\uc640 Coroutines\uc744 \uc0ac\uc6a9\uc911\uc778 \uc571\uc5d0 \ud55c\ud558\uc5ec), \uc774\ub294 Picasso \ube44\uc2b7\ud55c \uc218\uc900\uc774\uba70 Glide\uc640 Fresco\ubcf4\ub2e4\ub294 \uc801\uc2b5\ub2c8\ub2e4.</li> <li>\uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4: Coil API\ub294 \uc2ec\ud50c\ud568\uacfc \ucd5c\uc18c\ud55c\uc758 boilerplate\ub97c \uc704\ud558\uc5ec Kotlin\uc758 \uae30\ub2a5\uc744 \ud65c\uc6a9\ud569\ub2c8\ub2e4.</li> <li>\ud604\ub300\uc801\uc774\ub2e4: Coil\uc740 Kotlin \uc6b0\uc120\uc774\uba70 Coroutines, OkHttp, Okio, AndroidX Lifecycles\ub4f1\uc758 \ucd5c\uc2e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> </ul> <p>Coil\uc740: Coroutine Image Loader\uc758 \uc57d\uc790\uc785\ub2c8\ub2e4.</p>"},{"location":"README-ko/#_1","title":"\ub2e4\uc6b4\ub85c\ub4dc","text":"<p>Coil\uc740 <code>mavenCentral()</code>\ub85c \uc774\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> <pre><code>implementation(\"io.coil-kt:coil:2.7.0\")\n</code></pre>"},{"location":"README-ko/#_2","title":"\ube60\ub978 \uc2dc\uc791","text":""},{"location":"README-ko/#imageviews","title":"ImageViews","text":"<p><code>ImageView</code>\ub85c \uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud574, <code>load</code> \ud655\uc7a5 \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</p> <pre><code>// URL\nimageView.load(\"https://example.com/image.jpg\")\n\n// File\nimageView.load(File(\"/path/to/image.jpg\"))\n\n// And more...\n</code></pre> <p>Requests\ub294 trailing lambda \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ucd94\uac00 \uc124\uc815\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    crossfade(true)\n    placeholder(R.drawable.image)\n    transformations(CircleCropTransformation())\n}\n</code></pre>"},{"location":"README-ko/#jetpack-compose","title":"Jetpack Compose","text":"<p>Jetpack Compose \ud655\uc7a5 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucd94\uac00:</p> <pre><code>implementation(\"io.coil-kt:coil-compose:2.7.0\")\n</code></pre> <p>\uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\ub824\uba74, <code>AsyncImage</code> composable\ub97c \uc0ac\uc6a9\ud558\uc138\uc694:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"README-ko/#image-loaders","title":"Image Loaders","text":"<p><code>imageView.load</code> \uc640 <code>AsyncImage</code>\ub294 \uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud574 \uc2f1\uae00\ud1a4 <code>ImageLoader</code>\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc2f1\uae00\ud1a4 <code>ImageLoader</code>\ub294 <code>Context</code>\uc758 \ud655\uc7a5\ud568\uc218\ub97c \ud1b5\ud574 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:</p> <pre><code>val imageLoader = context.imageLoader\n</code></pre> <p><code>ImageLoader</code>\ub294 \uacf5\uc720\uac00 \uac00\ub2a5\ud558\uac8c \uc124\uacc4 \ub418\uc5c8\uc73c\uba70, \uc2f1\uae00 \uac1d\uccb4\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc571\uc5d0 \uc804\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ud588\uc744 \ub54c \uac00\uc7a5 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \uc989, \uc9c1\uc811 <code>ImageLoader</code> \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud574\ub3c4 \ub429\ub2c8\ub2e4:</p> <pre><code>val imageLoader = ImageLoader(context)\n</code></pre> <p>\uc2f1\uae00\ud1a4 <code>ImageLoader</code>\ub97c \uc0ac\uc6a9\ud558\uace0 \uc2f6\uc9c0 \uc54a\uc744\ub54c\uc5d0\ub294, <code>io.coil-kt:coil</code>\ub97c \ucc38\uc870\ud558\ub294 \ub300\uc2e0, <code>io.coil-kt:coil-base</code>\ub97c \ucc38\uc870\ud558\uc138\uc694.</p>"},{"location":"README-ko/#requests","title":"Requests","text":"<p>\ucee4\uc2a4\ud140 \ud0c0\uac9f\uc5d0 \uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud558\ub824\uba74, <code>ImageRequest</code>\ub97c <code>enqueue</code> \ud558\uc138\uc694:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target { drawable -&gt;\n        // Handle the result.\n    }\n    .build()\nval disposable = imageLoader.enqueue(request)\n</code></pre> <p>Imperative\ud558\uac8c \uc774\ubbf8\uc9c0 \ub85c\ub4dc\ub97c \ud558\ub824\uba74, <code>ImageRequest</code>\ub97c <code>execute</code> \ud558\uc138\uc694:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <p>\uc5ec\uae30\uc11c Coil\uc758 \uc804\uccb4 \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc138\uc694.</p>"},{"location":"README-ko/#r8-proguard","title":"R8 / Proguard","text":"<p>Coil\uc740 \ubcc4\ub3c4\uc758 \uc124\uc815 \uc5c6\uc774 R8\uacfc \uc644\ubcbd\ud558\uac8c \ud638\ud658 \uac00\ub2a5\ud558\uba70 \ucd94\uac00 \uaddc\uce59\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> <p>Proguard\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, Coroutines\uc640 OkHttp\uc758 \uaddc\uce59\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"README-ko/#_3","title":"\ub77c\uc774\uc120\uc2a4","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"README-ru/","title":"README ru","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 Android, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0430\u044f \u0441 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430\u043c\u0438 Kotlin. Coil - \u044d\u0442\u043e:</p> <ul> <li>\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c: Coil \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435, \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430/\u043e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435.</li> <li>\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0432\u0435\u0441: Coil \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 ~2000 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u0432\u0430\u0448 APK (\u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0443\u0436\u0435 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445\u0441\u044f OkHttp \u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430\u043c\u0438), \u0447\u0442\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u043c\u043e \u0441 Picasso \u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c Glide \u0438 Fresco.</li> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438: API Coil \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Kotlin, \u0447\u0442\u043e\u0431\u044b \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043a\u043e\u0434\u0430.</li> <li>\u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u044c: Coil \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f Kotlin \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b, OkHttp, Okio, \u0438 AndroidX Lifecycles.</li> </ul> <p>Coil - \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430: Coroutine Image Loader (\u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d).</p>"},{"location":"README-ru/#_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<p>Coil \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 <code>mavenCentral()</code>.</p> <pre><code>implementation(\"io.coil-kt:coil:2.7.0\")\n</code></pre>"},{"location":"README-ru/#_2","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"README-ru/#imageviews","title":"ImageViews","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 <code>ImageView</code>, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c <code>load</code>:</p> <pre><code>// URL\nimageView.load(\"https://example.com/image.jpg\")\n\n// \u0424\u0430\u0439\u043b\nimageView.load(File(\"/path/to/image.jpg\"))\n\n// \u0418 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435...\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043c\u043e\u0433\u0443\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043b\u044f\u043c\u0431\u0434\u0430-\u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439:</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    crossfade(true)\n    placeholder(R.drawable.image)\n    transformations(CircleCropTransformation())\n}\n</code></pre>"},{"location":"README-ru/#jetpack-compose","title":"Jetpack Compose","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443-\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0434\u043b\u044f Jetpack Compose:</p> <pre><code>implementation(\"io.coil-kt:coil-compose:2.7.0\")\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c composable-\u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 <code>AsyncImage</code>:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"README-ru/#_3","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","text":"<p>\u041a\u0430\u043a <code>imageView.load</code>, \u0442\u0430\u043a \u0438 <code>AsyncImage</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d <code>ImageLoader</code> \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443. \u0421\u0438\u043d\u0433\u043b\u0442\u043e\u043d <code>ImageLoader</code> \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 <code>Context</code>:</p> <pre><code>val imageLoader = context.imageLoader\n</code></pre> <p><code>ImageLoader</code>\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b, \u043a\u043e\u0433\u0434\u0430 \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0435\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0441\u0432\u043e\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b <code>ImageLoader</code>, \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f:</p> <pre><code>val imageLoader = ImageLoader(context)\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d <code>ImageLoader</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>io.coil-kt:coil-base</code> \u0432\u043c\u0435\u0441\u0442\u043e <code>io.coil-kt:coil</code>.</p>"},{"location":"README-ru/#_4","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0446\u0435\u043b\u044c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>enqueue</code> \u043d\u0430 <code>ImageRequest</code>:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target { drawable -&gt;\n        // \u0420\u0430\u0441\u043f\u043e\u0440\u044f\u0436\u0430\u0439\u0442\u0435\u0441\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c.\n    }\n    .build()\nval disposable = imageLoader.enqueue(request)\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 <code>execute</code> \u043d\u0430 <code>ImageRequest</code>:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <p>\u041f\u043e\u043b\u043d\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f Coil \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"README-ru/#r8-proguard","title":"R8 / Proguard","text":"<p>Coil \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 R8 \"\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\" \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Proguard, \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u043a\u043e\u0440\u0443\u0442\u0438\u043d \u0438 OkHttp.</p>"},{"location":"README-ru/#_5","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"README-sv/","title":"README sv","text":"<p>Ett bildladdningsbibliotek f\u00f6r Android med st\u00f6d f\u00f6r Kotlin Coroutines. Coil \u00e4r:</p> <ul> <li>Snabbt: Coil utf\u00f6r ett antal optimeringar inklusive minne och diskcache, nedsampling av bilden i minnet, automatisk paus/avbryt f\u00f6rfr\u00e5gningar och mer.</li> <li>Effektivt och optimerat: Coil l\u00e4gger till ~2000 metoder till din APK (f\u00f6r appar som redan anv\u00e4nder OkHttp och Coroutines), vilket \u00e4r j\u00e4mf\u00f6rbart med Picasso och betydligt mindre \u00e4n Glide och Fresco.</li> <li>Enkelt att anv\u00e4nda: Coils API utnyttjar Kotlins spr\u00e5kfunktioner f\u00f6r enkelhet och minimal boilerplate kod.</li> <li>Modernt: Coil \u00e4r skapat f\u00f6r Kotlin i f\u00f6rsta hand och anv\u00e4nder moderna bibliotek inklusive Coroutines, OkHttp, Okio och AndroidX Lifecycles.</li> </ul> <p>Coil \u00e4r en f\u00f6rkortning f\u00f6r: Coroutine Image Loader.</p> <p>\u00d6vers\u00e4ttningar: \ud55c\uad6d\uc5b4, \u4e2d\u6587, T\u00fcrk\u00e7e, \u65e5\u672c\u8a9e, Svenska</p>"},{"location":"README-sv/#hamta","title":"H\u00e4mta","text":"<p>Coil finns att ladda ned fr\u00e5n <code>mavenCentral()</code>.</p> <pre><code>implementation(\"io.coil-kt:coil:2.7.0\")\n</code></pre>"},{"location":"README-sv/#snabbstartsguide","title":"Snabbstartsguide","text":""},{"location":"README-sv/#imageviews","title":"ImageViews","text":"<p>F\u00f6r att ladda in en bild i en <code>ImageView</code>, anv\u00e4nd f\u00f6rl\u00e4ngningsfunktionen <code>load</code>:</p> <pre><code>// URL\nimageView.load(\"https://example.com/image.jpg\")\n\n// Fil\nimageView.load(File(\"/path/to/image.jpg\"))\n\n// Och mer...\n</code></pre> <p>F\u00f6rfr\u00e5gningar kan konfigureras med en valfri sl\u00e4pande lambda:</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    crossfade(true)\n    placeholder(R.drawable.image)\n    transformations(CircleCropTransformation())\n}\n</code></pre>"},{"location":"README-sv/#jetpack-compose","title":"Jetpack Compose","text":"<p>Importera Jetpack Compose-f\u00f6rl\u00e4ngningsbiblioteket:</p> <pre><code>implementation(\"io.coil-kt:coil-compose:2.7.0\")\n</code></pre> <p>F\u00f6r att ladda in en bild, anv\u00e4nd en <code>AsyncImage</code> composable:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"README-sv/#bildladdare","title":"Bildladdare","text":"<p>B\u00e5de <code>imageView.load</code> och <code>AsyncImage</code> anv\u00e4nder singletonobjektet <code>ImageLoader</code> f\u00f6r att genomf\u00f6ra bildf\u00f6rfr\u00e5gningar. Singletonobjektet <code>ImageLoader</code> kan kommas \u00e5t genom att anv\u00e4nda en f\u00f6rl\u00e4ngningsfunktion f\u00f6r <code>Context</code>:</p> <pre><code>val imageLoader = context.imageLoader\n</code></pre> <p><code>ImageLoader</code>s \u00e4r designade f\u00f6r att vara delbara och \u00e4r mest effektiva n\u00e4r du skapar en enda instans och delar den i hela appen. Med det sagt, kan du \u00e4ven skapa din(a) egna instans(er) av <code>ImageLoader</code>:</p> <pre><code>val imageLoader = ImageLoader(context)\n</code></pre> <p>Om du inte vill anv\u00e4nda singletonobjektet <code>ImageLoader</code>, anv\u00e4nd artefakten <code>io.coil-kt:coil-base</code> ist\u00e4llet f\u00f6r <code>io.coil-kt:coil</code>.</p>"},{"location":"README-sv/#forfragningar","title":"F\u00f6rfr\u00e5gningar","text":"<p>F\u00f6r att ladda en bild till ett anpassat m\u00e5l, anv\u00e4nd metoden <code>enqueue</code> p\u00e5 en instans av klassen <code>ImageRequest</code>:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target { drawable -&gt;\n        // Handle the result.\n    }\n    .build()\nval disposable = imageLoader.enqueue(request)\n</code></pre> <p>F\u00f6r att ladda en bild imperativt, anv\u00e4nd metoden <code>execute</code> p\u00e5 en instans av klassen <code>ImageRequest</code>:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <p>Kolla in Coils fullst\u00e4ndiga dokumentation h\u00e4r.</p>"},{"location":"README-sv/#r8-proguard","title":"R8 / Proguard","text":"<p>Coil \u00e4r fullt kompatibel med R8 och kr\u00e4ver inga s\u00e4rskilda extra regler.</p> <p>Om du anv\u00e4nder Proguard kan du beh\u00f6va l\u00e4gga till regler f\u00f6r Coroutines och OkHttp.</p>"},{"location":"README-sv/#licens","title":"Licens","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"README-tr/","title":"README tr","text":"<p>Kotlin Coroutines taraf\u0131ndan desteklenen Android i\u00e7in bir g\u00f6r\u00fcnt\u00fc y\u00fckleme k\u00fct\u00fcphanesi. Coil \u015funlard\u0131r:</p> <ul> <li>H\u0131zl\u0131: Coil, bellek ve disk \u00f6nbellekleme, bellekteki g\u00f6r\u00fcnt\u00fcn\u00fcn \u00f6rnekleme yap\u0131lmas\u0131, otomatik olarak isteklerin durdurulmas\u0131/iptal edilmesi ve daha fazlas\u0131 dahil olmak \u00fczere bir dizi optimizasyon ger\u00e7ekle\u015ftirir.</li> <li>Hafif: Coil, APK'n\u0131za ~2000 y\u00f6ntem ekler (halihaz\u0131rda OkHttp ve Coroutines kullanan uygulamalar i\u00e7in), bu da Picasso ile kar\u015f\u0131la\u015ft\u0131r\u0131labilir ve Glide ve Fresco'dan \u00f6nemli \u00f6l\u00e7\u00fcde daha azd\u0131r.</li> <li>Kullan\u0131m\u0131 Kolay: Coil'in API'si, basitlik ve minimum kod tekrar\u0131 i\u00e7in Kotlin'in dil \u00f6zelliklerinden yararlan\u0131r.</li> <li>Modern: Coil, \u00f6ncelikle Kotlin'e dayan\u0131r ve Coroutines, OkHttp, Okio ve AndroidX Lifecycle gibi modern k\u00fct\u00fcphaneleri kullan\u0131r.</li> </ul> <p>Coil, Coroutine Image Loader'\u0131n k\u0131saltmas\u0131d\u0131r.</p> <p>\u00c7eviriler: \u65e5\u672c\u8a9e, \ud55c\uad6d\uc5b4, \u0420\u0443\u0441\u0441\u043a\u0438\u0439, Svenska, T\u00fcrk\u00e7e, \u4e2d\u6587</p>"},{"location":"README-tr/#indirme","title":"\u0130ndirme","text":"<p>Coil, <code>mavenCentral()</code> \u00fczerinde mevcuttur.</p> <pre><code>implementation(\"io.coil-kt:coil:2.7.0\")\n</code></pre>"},{"location":"README-tr/#hzl-baslangc","title":"H\u0131zl\u0131 Ba\u015flang\u0131\u00e7","text":""},{"location":"README-tr/#imageviews","title":"ImageViews","text":"<p>Bir g\u00f6r\u00fcnt\u00fcy\u00fc bir <code>ImageView</code>'a y\u00fcklemek i\u00e7in <code>load</code> uzant\u0131 fonksiyonunu kullan\u0131n:</p> <pre><code>// URL\nimageView.load(\"https://example.com/image.jpg\")\n\n// Dosya\nimageView.load(File(\"/path/to/image.jpg\"))\n\n// Ve daha fazlas\u0131...\n</code></pre> <p>\u0130stekler, iste\u011fe ba\u011fl\u0131 bir kapanan lambda ile yap\u0131land\u0131r\u0131labilir:</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    crossfade(true)\n    placeholder(R.drawable.image)\n    transformations(CircleCropTransformation())\n}\n</code></pre>"},{"location":"README-tr/#jetpack-compose","title":"Jetpack Compose","text":"<p>Jetpack Compose uzant\u0131 k\u00fct\u00fcphanesini i\u00e7e aktar\u0131n:</p> <pre><code>implementation(\"io.coil-kt:coil-compose:2.7.0\")\n</code></pre> <p>Bir g\u00f6r\u00fcnt\u00fc y\u00fcklemek i\u00e7in, <code>AsyncImage</code> bile\u015fenini kullan\u0131n:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"README-tr/#goruntu-yukleyiciler","title":"G\u00f6r\u00fcnt\u00fc Y\u00fckleyiciler","text":"<p><code>imageView.load</code> ve <code>AsyncImage</code> hem g\u00f6r\u00fcnt\u00fc isteklerini y\u00fcr\u00fctmek i\u00e7in singleton <code>ImageLoader</code>'\u0131 kullan\u0131r. Singleton <code>ImageLoader</code>'a bir <code>Context</code> geni\u015fletme fonksiyonu kullanarak eri\u015filebilir:</p> <pre><code>val imageLoader = context.imageLoader\n</code></pre> <p><code>ImageLoader</code>'lar payla\u015f\u0131labilir olarak tasarlanm\u0131\u015ft\u0131r ve uygulaman\u0131z boyunca tek bir \u00f6rnek olu\u015fturup payla\u015ft\u0131\u011f\u0131n\u0131zda en verimlidir. Bununla birlikte, kendi <code>ImageLoader</code> \u00f6rne\u011finizi de olu\u015fturabilirsiniz:</p> <pre><code>val imageLoader = ImageLoader(context)\n</code></pre> <p>E\u011fer singleton <code>ImageLoader</code> istemiyorsan\u0131z, <code>io.coil-kt:coil</code> yerine <code>io.coil-kt:coil-base</code> ba\u011f\u0131ml\u0131l\u0131\u011f\u0131n\u0131 kullan\u0131n.</p>"},{"location":"README-tr/#istekler","title":"\u0130stekler","text":"<p>Bir g\u00f6r\u00fcnt\u00fcy\u00fc \u00f6zel bir hedefe y\u00fcklemek i\u00e7in bir <code>ImageRequest</code>'i <code>enqueue</code> edin:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target { drawable -&gt;\n        // Sonucu i\u015fleyin.\n    }\n    .build()\nval disposable = imageLoader.enqueue(request)\n</code></pre> <p>Bir g\u00f6r\u00fcnt\u00fcy\u00fc mecburi bir \u015fekilde y\u00fcklemek i\u00e7in bir <code>ImageRequest</code>'i <code>execute</code> edin:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <p>Coil'in tam belgelerini buradan inceleyin.</p>"},{"location":"README-tr/#r8-proguard","title":"R8 / Proguard","text":"<p>Coil, R8 ile uyumlu olarak kutudan \u00e7\u0131kar ve ekstra kurallar eklemeyi gerektirmez.</p> <p>E\u011fer Proguard kullan\u0131yorsan\u0131z, Coroutines ve OkHttp i\u00e7in kurallar eklemeniz gerekebilir.</p>"},{"location":"README-tr/#lisans","title":"Lisans","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"README-zh/","title":"README zh","text":"<p>Coil \u662f\u4e00\u4e2a Android \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u901a\u8fc7 Kotlin \u534f\u7a0b\u7684\u65b9\u5f0f\u52a0\u8f7d\u56fe\u7247\u3002\u7279\u70b9\u5982\u4e0b\uff1a</p> <ul> <li>\u66f4\u5feb: Coil \u5728\u6027\u80fd\u4e0a\u6709\u5f88\u591a\u4f18\u5316\uff0c\u5305\u62ec\u5185\u5b58\u7f13\u5b58\u548c\u78c1\u76d8\u7f13\u5b58\uff0c\u628a\u7f29\u7565\u56fe\u5b58\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u5faa\u73af\u5229\u7528 bitmap\uff0c\u81ea\u52a8\u6682\u505c\u548c\u53d6\u6d88\u56fe\u7247\u7f51\u7edc\u8bf7\u6c42\u7b49\u3002</li> <li>\u66f4\u8f7b\u91cf\u7ea7: Coil \u53ea\u67092000\u4e2a\u65b9\u6cd5\uff08\u524d\u63d0\u662f\u4f60\u7684 APP \u91cc\u9762\u96c6\u6210\u4e86 OkHttp \u548c Coroutines\uff09\uff0cCoil \u548c Picasso \u7684\u65b9\u6cd5\u6570\u5dee\u4e0d\u591a\uff0c\u76f8\u6bd4 Glide \u548c Fresco \u8981\u8f7b\u91cf\u5f88\u591a\u3002</li> <li>\u66f4\u5bb9\u6613\u4f7f\u7528: Coil \u7684 API \u5145\u5206\u5229\u7528\u4e86 Kotlin \u8bed\u8a00\u7684\u65b0\u7279\u6027\uff0c\u7b80\u5316\u548c\u51cf\u5c11\u4e86\u5f88\u591a\u6837\u677f\u4ee3\u7801\u3002</li> <li>\u66f4\u6d41\u884c: Coil \u9996\u9009 Kotlin \u8bed\u8a00\u5f00\u53d1\u5e76\u4e14\u4f7f\u7528\u5305\u542b Coroutines, OkHttp, Okio \u548c AndroidX Lifecycles \u5728\u5185\u6700\u6d41\u884c\u7684\u5f00\u6e90\u5e93\u3002</li> </ul> <p>Coil \u540d\u5b57\u7684\u7531\u6765\uff1a\u53d6 Coroutine Image Loader \u9996\u5b57\u6bcd\u5f97\u6765\u3002</p>"},{"location":"README-zh/#_1","title":"\u4e0b\u8f7d","text":"<p>Coil \u53ef\u4ee5\u5728 <code>mavenCentral()</code> \u4e0b\u8f7d</p> <pre><code>implementation(\"io.coil-kt:coil:2.7.0\")\n</code></pre>"},{"location":"README-zh/#_2","title":"\u5feb\u901f\u4e0a\u624b","text":"<p>\u53ef\u4ee5\u4f7f\u7528 <code>ImageView</code> \u7684\u6269\u5c55\u51fd\u6570 <code>load</code> \u52a0\u8f7d\u4e00\u5f20\u56fe\u7247\uff1a</p> <pre><code>// URL\nimageView.load(\"https://example.com/image.jpg\")\n\n// Resource\nimageView.load(R.drawable.image)\n\n// File\nimageView.load(File(\"/path/to/image.jpg\"))\n\n// And more...\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 lambda \u8bed\u6cd5\u8f7b\u677e\u914d\u7f6e\u8bf7\u6c42\u9009\u9879\uff1a</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    crossfade(true)\n    placeholder(R.drawable.image)\n    transformations(CircleCropTransformation())\n}\n</code></pre>"},{"location":"README-zh/#jetpack-compose","title":"Jetpack Compose","text":"<p>\u5f15\u5165 Jetpack Compose \u6269\u5c55\u5e93:</p> <pre><code>implementation(\"io.coil-kt:coil-compose:2.7.0\")\n</code></pre> <p>\u4f7f\u7528 <code>AsyncImage</code> \u52a0\u8f7d\u56fe\u7247:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"README-zh/#imageloader","title":"\u56fe\u7247\u52a0\u8f7d\u5668 <code>ImageLoader</code>","text":"<p><code>imageView.load</code> \u4f7f\u7528\u5355\u4f8b <code>ImageLoader</code> \u6765\u628a <code>ImageRequest</code> \u52a0\u5165\u961f\u5217. <code>ImageLoader</code> \u5355\u4f8b\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u65b9\u6cd5\u6765\u83b7\u53d6\uff1a</p> <pre><code>val imageLoader = context.imageLoader\n</code></pre> <p>\u6b64\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa <code>ImageLoader</code> \u5b9e\u4f8b\u4ece\u800c\u5b9e\u73b0\u4f9d\u8d56\u6ce8\u5165\uff1a</p> <pre><code>val imageLoader = ImageLoader(context)\n</code></pre> <p>\u5982\u679c\u4f60\u4e0d\u9700\u8981 <code>ImageLoader</code> \u4f5c\u4e3a\u5355\u4f8b\uff0c\u8bf7\u628aGradle\u4f9d\u8d56\u66ff\u6362\u6210 <code>io.coil-kt:coil-base</code>.</p>"},{"location":"README-zh/#imagerequest","title":"\u56fe\u7247\u8bf7\u6c42 <code>ImageRequest</code>","text":"<p>\u5982\u679c\u60f3\u5b9a\u5236 <code>ImageRequest</code> \u7684\u52a0\u8f7d\u76ee\u6807\uff0c\u53ef\u4ee5\u4f9d\u7167\u5982\u4e0b\u65b9\u5f0f\u628a <code>ImageRequest</code> \u52a0\u5165\u961f\u5217\uff1a</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target { drawable -&gt;\n        // Handle the result.\n    }\n    .build()\nval disposable = imageLoader.enqueue(request)\n</code></pre> <p>\u5982\u679c\u60f3\u547d\u4ee4\u5f0f\u5730\u6267\u884c\u56fe\u7247\u52a0\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 <code>execute(ImageRequest)</code>\uff1a</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <p>\u8bf7\u81f3 Coil \u7684\u5b8c\u6574\u6587\u6863\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"README-zh/#r8-proguard","title":"R8 / Proguard","text":"<p>Coil \u517c\u5bb9 R8 \u6df7\u6dc6\uff0c\u60a8\u65e0\u9700\u518d\u6dfb\u52a0\u5176\u4ed6\u7684\u89c4\u5219</p> <p>\u5982\u679c\u60a8\u9700\u8981\u6df7\u6dc6\u4ee3\u7801\uff0c\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u5bf9\u5e94\u7684\u6df7\u6dc6\u89c4\u5219\uff1aCoroutines, OkHttp\u3002</p>"},{"location":"README-zh/#license","title":"License","text":"<pre><code>Copyright 2024 Coil Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#300-rc01-october-8-2024","title":"[3.0.0-rc01] - October 8, 2024","text":"<p>For the full list of improvements and important changes in 3.x, check out the upgrade guide. Changes since <code>3.0.0-alpha10</code>:</p> <ul> <li>BREAKING Disable <code>addLastModifiedToFileCacheKey</code> by default and allow it to be set per request. The behaviour can be reenabled with the same flag.</li> <li>New: Introduce a new <code>coil-network-cache-control</code> artifact, which implements <code>Cache-Control</code> header support.</li> <li>New: Add <code>scaleToDensity</code> property to <code>SvgDecoder.Factory</code>. This property ensure SVGs with intrinsic dimensions are multiplied by the devices density (only supported on Android).</li> <li>Rename <code>ExifOrientationPolicy</code> to <code>ExifOrientationStrategy</code>.</li> <li>Remove unshareable images from the <code>MemoryCache</code> on get.</li> <li>Make <code>ConstraintsSizeResolver</code> public.</li> <li>Stabilize <code>setSingletonImageLoaderFactory</code>.</li> <li>Restore optimized JVM I/O functions in <code>coil-network-ktor3</code></li> <li>Add <code>pdf</code> to list of mime types.</li> <li>Update compile sdk to 35.</li> <li>Update Kotlin to 2.0.20.</li> <li>Update Okio to 3.9.1.</li> </ul>"},{"location":"changelog/#300-alpha10-august-7-2024","title":"[3.0.0-alpha10] - August 7, 2024","text":"<ul> <li>BREAKING: Replace <code>ImageLoader.Builder.networkObserverEnabled</code> with a <code>ConnectivityChecker</code> interface for <code>NetworkFetcher</code>.<ul> <li>To disable the network observer, pass <code>ConnectivityChecker.ONLINE</code> to the constructor for <code>KtorNetworkFetcherFactory</code>/<code>OkHttpNetworkFetcherFactory</code>.</li> </ul> </li> <li>New: Support loading Compose Multiplatform resources on all platforms. To load a resource, use <code>Res.getUri</code>:</li> </ul> <pre><code>AsyncImage(\n    model = Res.getUri(\"drawable/image.jpg\"),\n    contentDescription = null,\n)\n</code></pre> <ul> <li>Add <code>maxBitmapSize</code> property to <code>ImageLoader</code> and <code>ImageRequest</code>.<ul> <li>This property defaults to 4096x4096 and provides a safe upper bound for the dimensions of an allocated bitmap. This helps accidentally loading very large images with <code>Size.ORIGINAL</code> and causing an out of memory exception.</li> </ul> </li> <li>Convert <code>ExifOrientationPolicy</code> to be an interface to support custom policies.</li> <li>Fix <code>Uri</code> handling of Windows file paths.</li> <li>Remove <code>@ExperimentalCoilApi</code> from the <code>Image</code> APIs.</li> <li>Update Kotlin to 2.0.10.</li> </ul>"},{"location":"changelog/#300-alpha09-july-23-2024","title":"[3.0.0-alpha09] - July 23, 2024","text":"<ul> <li>BREAKING: Rename the <code>io.coil-kt.coil3:coil-network-ktor</code> artifact to <code>io.coil-kt.coil3:coil-network-ktor2</code> which depends on Ktor 2.x. Additionally, introduce <code>io.coil-kt.coil3:coil-network-ktor3</code> which depends on Ktor 3.x. <code>wasmJs</code> support is only available in Ktor 3.x.</li> <li>New: Add <code>AsyncImagePainter.restart()</code> to manually restart an image request.</li> <li>Remove <code>@ExperimentalCoilApi</code> from <code>NetworkClient</code> and related classes.</li> <li>Optimize <code>ImageRequest</code> to avoid unnecessary <code>Extras</code> and <code>Map</code> allocations.</li> </ul>"},{"location":"changelog/#270-july-17-2024","title":"[2.7.0] - July 17, 2024","text":"<ul> <li>Slightly optimize internal coroutines usage to improve the performance of <code>ImageLoader.execute</code>, <code>AsyncImage</code>, <code>SubcomposeAsyncImage</code>, and <code>rememberAsyncImagePainter</code>. (#2205)</li> <li>Fix duplicate network calls for chunked responses. (#2363)</li> <li>Update Kotlin to 2.0.0.</li> <li>Update Compose UI to 1.6.8.</li> <li>Update Okio to 3.9.0.</li> </ul>"},{"location":"changelog/#300-alpha08-july-8-2024","title":"[3.0.0-alpha08] - July 8, 2024","text":"<ul> <li>BREAKING: Rename <code>ImageRequest</code> and <code>ImageLoader</code> <code>dispatcher</code> methods to <code>coroutineContext</code>. For instance, <code>ImageRequest.Builder.dispatcher</code> is now <code>ImageRequest.Builder.coroutineContext</code>. This was renamed as the method now accepts any <code>CoroutineContext</code> and no longer requires a <code>Dispatcher</code>.</li> <li>Fix: Fix <code>IllegalStateException: Reading a state that was created after the snapshot was taken or in a snapshot that has not yet been applied</code> which could occur due to a race condition.<ul> <li>NOTE: This reintroduces a soft dependency on <code>Dispatchers.Main.immediate</code>. As a result you should re-add a dependency on <code>kotlinx-coroutines-swing</code> on JVM. If it's not imported then <code>ImageRequest</code>s won't be dispatched immediately and will have one frame of delay before setting the <code>ImageRequest.placeholder</code> or resolving from the memory cache.</li> </ul> </li> </ul>"},{"location":"changelog/#300-alpha07-june-26-2024","title":"[3.0.0-alpha07] - June 26, 2024","text":"<ul> <li>BREAKING: <code>AsyncImagePainter</code> no longer waits for <code>onDraw</code> by default and instead uses <code>Size.ORIGINAL</code>.<ul> <li>This fixes compatibility issues with Roborazzi/Paparazzi and overall improves test reliability.</li> <li>To revert back to waiting for <code>onDraw</code>, set <code>DrawScopeSizeResolver</code> as your <code>ImageRequest.sizeResolver</code>.</li> </ul> </li> <li>BREAKING: Refactor the multiplatform <code>Image</code> API. Notably, <code>asCoilImage</code> has been renamed to <code>asImage</code>.</li> <li>BREAKING: <code>AsyncImagePainter.state</code> has been changed to <code>StateFlow&lt;AsyncImagePainter.State&gt;</code>. Use <code>collectAsState</code> to observe its value. This improves performance.</li> <li>BREAKING: <code>AsyncImagePainter.imageLoader</code> and <code>AsyncImagePainter.request</code> have been combined into <code>StateFlow&lt;AsyncImagePainter.Inputs&gt;</code>. Use <code>collectAsState</code> to observe its value. This improves performance.</li> <li>BREAKING: Remove support for <code>android.resource://example.package.name/drawable/image</code> URIs as it prevents resource shrinking optimizations.<ul> <li>If you still needs its functionality you can manually include <code>ResourceUriMapper</code> in your component registry.</li> </ul> </li> <li>New: Introduce <code>AsyncImagePreviewHandler</code> to support controlling <code>AsyncImagePainter</code>'s preview rendering behavior.<ul> <li>Use <code>LocalAsyncImagePreviewHandler</code> to override the preview behavior.</li> <li>As part of this change and other <code>coil-compose</code> improvements, <code>AsyncImagePainter</code> now attempts to execute execute the <code>ImageRequest</code> by default instead of defaulting to displaying <code>ImageRequest.placeholder</code>. Requests that use the network or files are expected to fail in the preview environment, however Android resources should work.</li> </ul> </li> <li>New: Support extracting video image by frame index. (#2183)</li> <li>New: Support passing <code>CoroutineContext</code> to any <code>CoroutineDispatcher</code> methods. (#2241).</li> <li>New: Support the weak reference memory cache on JS and WASM JS.</li> <li>Don't dispatch to <code>Dispatchers.Main.immediate</code> in Compose. As a side-effect, <code>kotlinx-coroutines-swing</code> no longer needs to be imported on JVM.</li> <li>Don't call <code>async</code> and create a disposable in Compose to improve performance (thanks @mlykotom!). (#2205)</li> <li>Fix passing global <code>ImageLoader</code> extras to <code>Options</code>. (#2223)</li> <li>Fix <code>crossfade(false)</code> not working on non-Android targets.</li> <li>Fix VP8X feature flags byte offset (#2199).</li> <li>Convert <code>SvgDecoder</code> on non-Android targets to render to a bitmap instead of render the image at draw-time. This improves performance.<ul> <li>This behavior can be controlled using <code>SvgDecoder(renderToBitmap)</code>.</li> </ul> </li> <li>Move <code>ScaleDrawable</code> from <code>coil-gif</code> to <code>coil-core</code>.</li> <li>Update Kotlin to 2.0.0.</li> <li>Update Compose to 1.6.11.</li> <li>Update Okio to 3.9.0.</li> <li>Update Skiko to 0.8.4.</li> <li>For the full list of important changes in 3.x, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#300-alpha06-february-29-2024","title":"[3.0.0-alpha06] - February 29, 2024","text":"<ul> <li>Downgrade Skiko to 0.7.93.</li> <li>For the full list of important changes in 3.x, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#300-alpha05-february-28-2024","title":"[3.0.0-alpha05] - February 28, 2024","text":"<ul> <li>New: Support the <code>wasmJs</code> target.</li> <li>Create <code>DrawablePainter</code> and <code>DrawableImage</code> to support drawing <code>Image</code>s that aren't backed by a <code>Bitmap</code> on non-Android platforms.<ul> <li>The <code>Image</code> APIs are experimental and likely to change between alpha releases.</li> </ul> </li> <li>Update <code>ContentPainterModifier</code> to implement <code>Modifier.Node</code>.</li> <li>Fix: Lazily register component callbacks and the network observer on a background thread. This fixes slow initialization that would typically occur on the main thread.</li> <li>Fix: Fix <code>ImageLoader.Builder.placeholder/error/fallback</code> not being used by <code>ImageRequest</code>.</li> <li>Update Compose to 1.6.0.</li> <li>Update Coroutines to 1.8.0.</li> <li>Update Okio to 3.8.0.</li> <li>Update Skiko to 0.7.94.</li> <li>For the full list of important changes in 3.x, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#260-february-23-2024","title":"[2.6.0] - February 23, 2024","text":"<ul> <li>Make <code>rememberAsyncImagePainter</code>, <code>AsyncImage</code>, and <code>SubcomposeAsyncImage</code> restartable and skippable. This improves performance by avoiding recomposition unless one of the composable's arguments changes.<ul> <li>Add an optional <code>modelEqualityDelegate</code> argument to <code>rememberAsyncImagePainter</code>, <code>AsyncImage</code>, and <code>SubcomposeAsyncImage</code> to control whether the <code>model</code> will trigger a recomposition.</li> </ul> </li> <li>Update <code>ContentPainterModifier</code> to implement <code>Modifier.Node</code>.</li> <li>Fix: Lazily register component callbacks and the network observer on a background thread. This fixes slow initialization that would typically occur on the main thread.</li> <li>Fix: Avoid relaunching a new image request in <code>rememberAsyncImagePainter</code>, <code>AsyncImage</code>, and <code>SubcomposeAsyncImage</code> if <code>ImageRequest.listener</code> or <code>ImageRequest.target</code> change.</li> <li>Fix: Don't observe the image request twice in <code>AsyncImagePainter</code>.</li> <li>Update Kotlin to 1.9.22.</li> <li>Update Compose to 1.6.1.</li> <li>Update Okio to 3.8.0.</li> <li>Update <code>androidx.collection</code> to 1.4.0.</li> <li>Update <code>androidx.lifecycle</code> to 2.7.0.</li> </ul>"},{"location":"changelog/#300-alpha04-february-1-2024","title":"[3.0.0-alpha04] - February 1, 2024","text":"<ul> <li>Breaking: Remove <code>Lazy</code> from <code>OkHttpNetworkFetcherFactory</code> and <code>KtorNetworkFetcherFactory</code>'s public API.</li> <li>Expose <code>Call.Factory</code> instead of <code>OkHttpClient</code> in <code>OkHttpNetworkFetcherFactory</code>.</li> <li>Convert <code>NetworkResponseBody</code> to wrap a <code>ByteString</code>.</li> <li>Downgrade Compose to 1.5.12.</li> <li>For the full list of important changes, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#300-alpha03-january-20-2024","title":"[3.0.0-alpha03] - January 20, 2024","text":"<ul> <li>Breaking: <code>coil-network</code> has been renamed to <code>coil-network-ktor</code>. Additionally, there is a new <code>coil-network-okhttp</code> artifact that depends on OkHttp and doesn't require specifying a Ktor engine.<ul> <li>Depending on which artifact you import you can reference the <code>Fetcher.Factory</code> manually using <code>KtorNetworkFetcherFactory</code> or <code>OkHttpNetworkFetcherFactory</code>.</li> </ul> </li> <li>Support loading <code>NSUrl</code> on Apple platforms.</li> <li>Add <code>clipToBounds</code> parameter to <code>AsyncImage</code>.</li> <li>For the full list of important changes, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#300-alpha02-january-10-2024","title":"[3.0.0-alpha02] - January 10, 2024","text":"<ul> <li>Breaking: <code>coil-gif</code>, <code>coil-network</code>, <code>coil-svg</code>, and <code>coil-video</code>'s packages have been updated so all their classes are part of <code>coil.gif</code>, <code>coil.network</code>, <code>coil.svg</code>, and <code>coil.video</code> respectively. This helps avoid class name conflicts with other artifacts.</li> <li>Breaking: <code>ImageDecoderDecoder</code> has been renamed to <code>AnimatedImageDecoder</code>.</li> <li>New: <code>coil-gif</code>, <code>coil-network</code>, <code>coil-svg</code>, and <code>coil-video</code>'s components are now automatically added to each <code>ImageLoader</code>'s <code>ComponentRegistry</code>.<ul> <li>To be clear, unlike <code>3.0.0-alpha01</code> you do not need to manually add <code>NetworkFetcher.Factory()</code> to your <code>ComponentRegistry</code>. Simply importing <code>io.coil-kt.coil3:coil-network:[version]</code> and a Ktor engine is enough to load network images.</li> <li>It's safe to also add these components to <code>ComponentRegistry</code> manually. Any manually added components take precedence over components that are added automatically.</li> <li>If preferred, this behaviour can be disabled using <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code>.</li> </ul> </li> <li>New: Support <code>coil-svg</code> on all platforms. It's backed by AndroidSVG on Android and SVGDOM on non-Android platforms.</li> <li>Coil now uses Android's <code>ImageDecoder</code> API internally, which has performance benefits when decoding directly from a file, resource, or content URI.</li> <li>Fix: Multiple <code>coil3.Uri</code> parsing fixes.</li> <li>For the full list of important changes, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#300-alpha01-december-30-2023","title":"[3.0.0-alpha01] - December 30, 2023","text":"<ul> <li>New: Compose Multiplatform support. Coil is now a Kotlin Multiplatform library that supports Android, JVM, iOS, macOS, and Javascript.</li> <li>Coil's Maven coordinates were updated to <code>io.coil-kt.coil3</code> and its imports were updated to <code>coil3</code>. This allows Coil 3 to run side by side with Coil 2 without binary compatibility issues. For example, <code>io.coil-kt:coil:[version]</code> is now <code>io.coil-kt.coil3:coil:[version]</code>.</li> <li>The <code>coil-base</code> and <code>coil-compose-base</code> artifacts were renamed to <code>coil-core</code> and <code>coil-compose-core</code> respectively to align with the naming conventions used by Coroutines, Ktor, and AndroidX.</li> <li>For the full list of important changes, check out the upgrade guide.</li> </ul>"},{"location":"changelog/#250-october-30-2023","title":"[2.5.0] - October 30, 2023","text":"<ul> <li>New: Add <code>MediaDataSourceFetcher.Factory</code> to support decoding <code>MediaDataSource</code> implementations in <code>coil-video</code>. (#1795)</li> <li>Add the <code>SHIFT6m</code> device to the hardware bitmap blocklist. (#1812)</li> <li>Fix: Guard against painters that return a size with one unbounded dimension. (#1826)</li> <li>Fix: Disk cache load fails after <code>304 Not Modified</code> when cached headers include non-ASCII characters. (#1839)</li> <li>Fix: <code>FakeImageEngine</code> not updating the interceptor chain's request. (#1905)</li> <li>Update compile SDK to 34.</li> <li>Update Kotlin to 1.9.10.</li> <li>Update Coroutines to 1.7.3.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.32.0.</li> <li>Update <code>androidx.annotation</code> to 1.7.0.</li> <li>Update <code>androidx.compose.foundation</code> to 1.5.4.</li> <li>Update <code>androidx.core</code> to 1.12.0.</li> <li>Update <code>androidx.exifinterface:exifinterface</code> to 1.3.6.</li> <li>Update <code>androidx.lifecycle</code> to 2.6.2.</li> <li>Update <code>com.squareup.okhttp3</code> to 4.12.0.</li> <li>Update <code>com.squareup.okio</code> to 3.6.0.</li> </ul>"},{"location":"changelog/#240-may-21-2023","title":"[2.4.0] - May 21, 2023","text":"<ul> <li>Rename <code>DiskCache</code> <code>get</code>/<code>edit</code> to <code>openSnapshot</code>/<code>openEditor</code>.</li> <li>Don't automatically convert <code>ColorDrawable</code> to <code>ColorPainter</code> in <code>AsyncImagePainter</code>.</li> <li>Annotate simple <code>AsyncImage</code> overloads with <code>@NonRestartableComposable</code>.</li> <li>Fix: Call <code>Context.cacheDir</code> lazily in <code>ImageSource</code>.</li> <li>Fix: Fix publishing <code>coil-bom</code>.</li> <li>Fix: Fix always setting bitmap config to <code>ARGB_8888</code> if hardware bitmaps are disabled.</li> <li>Update Kotlin to 1.8.21.</li> <li>Update Coroutines to 1.7.1.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.30.1.</li> <li>Update <code>androidx.compose.foundation</code> to 1.4.3.</li> <li>Update <code>androidx.profileinstaller:profileinstaller</code> to 1.3.1.</li> <li>Update <code>com.squareup.okhttp3</code> to 4.11.0.</li> </ul>"},{"location":"changelog/#230-march-25-2023","title":"[2.3.0] - March 25, 2023","text":"<ul> <li>New: Introduce a new <code>coil-test</code> artifact, which includes <code>FakeImageLoaderEngine</code>. This class is useful for hardcoding image loader responses to ensure consistent and synchronous (from the main thread) responses in tests. See here for more info.</li> <li>New: Add baseline profiles to <code>coil-base</code> (child module of <code>coil</code>) and <code>coil-compose-base</code> (child module of <code>coil-compose</code>).<ul> <li>This improves Coil's runtime performance and should offer better frame timings depending on how Coil is used in your app.</li> </ul> </li> <li>Fix: Fix parsing <code>file://</code> URIs with encoded data. #1601</li> <li>Fix: <code>DiskCache</code> now properly computes its maximum size if passed a directory that does not exist. #1620</li> <li>Make <code>Coil.reset</code> public API. #1506</li> <li>Enable Java default method generation. #1491</li> <li>Update Kotlin to 1.8.10.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.30.0.</li> <li>Update <code>androidx.annotation</code> to 1.6.0.</li> <li>Update <code>androidx.appcompat:appcompat-resources</code> to 1.6.1.</li> <li>Update <code>androidx.compose.foundation</code> to 1.4.0.</li> <li>Update <code>androidx.core</code> to 1.9.0.</li> <li>Update <code>androidx.exifinterface:exifinterface</code> to 1.3.6.</li> <li>Update <code>androidx.lifecycle</code> to 2.6.1.</li> <li>Update <code>okio</code> to 3.3.0.</li> </ul>"},{"location":"changelog/#222-october-1-2022","title":"[2.2.2] - October 1, 2022","text":"<ul> <li>Ensure an image loader is fully initialized before registering its system callbacks. #1465</li> <li>Set the preferred bitmap config in <code>VideoFrameDecoder</code> on API 30+ to avoid banding. #1487</li> <li>Fix parsing paths containing <code>#</code> in <code>FileUriMapper</code>. #1466</li> <li>Fix reading responses with non-ascii headers from the disk cache. #1468</li> <li>Fix decoding videos inside asset subfolders. #1489</li> <li>Update <code>androidx.annotation</code> to 1.5.0.</li> </ul>"},{"location":"changelog/#221-september-8-2022","title":"[2.2.1] - September 8, 2022","text":"<ul> <li>Fix: <code>RoundedCornersTransformation</code> now properly scales the <code>input</code> bitmap.</li> <li>Remove dependency on the <code>kotlin-parcelize</code> plugin.</li> <li>Update compile SDK to 33.</li> <li>Downgrade <code>androidx.appcompat:appcompat-resources</code> to 1.4.2 to work around #1423.</li> </ul>"},{"location":"changelog/#220-august-16-2022","title":"[2.2.0] - August 16, 2022","text":"<ul> <li>New: Add <code>ImageRequest.videoFramePercent</code> to <code>coil-video</code> to support specifying the video frame as a percent of the video's duration.</li> <li>New: Add <code>ExifOrientationPolicy</code> to configure how <code>BitmapFactoryDecoder</code> treats EXIF orientation data.</li> <li>Fix: Don't throw an exception in <code>RoundedCornersTransformation</code> if passed a size with an undefined dimension.</li> <li>Fix: Read a GIF's frame delay as two unsigned bytes instead of one signed byte.</li> <li>Update Kotlin to 1.7.10.</li> <li>Update Coroutines to 1.6.4.</li> <li>Update Compose to 1.2.1.</li> <li>Update OkHttp to 4.10.0.</li> <li>Update Okio to 3.2.0.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.25.1.</li> <li>Update <code>androidx.annotation</code> to 1.4.0.</li> <li>Update <code>androidx.appcompat:appcompat-resources</code> to 1.5.0.</li> <li>Update <code>androidx.core</code> to 1.8.0.</li> </ul>"},{"location":"changelog/#210-may-17-2022","title":"[2.1.0] - May 17, 2022","text":"<ul> <li>New: Support loading <code>ByteArray</code>s. (#1202)</li> <li>New: Support setting custom CSS rules for SVGs using <code>ImageRequest.Builder.css</code>. (#1210)</li> <li>Fix: Convert <code>GenericViewTarget</code>'s private methods to protected. (#1273)</li> <li>Update compile SDK to 32. (#1268)</li> </ul>"},{"location":"changelog/#200-may-10-2022","title":"[2.0.0] - May 10, 2022","text":"<p>Coil 2.0.0 is a major iteration of the library and includes breaking changes. Check out the upgrade guide for how to upgrade.</p> <ul> <li>New: Introduce <code>AsyncImage</code> in <code>coil-compose</code>. Check out the documentation for more info.</li> </ul> <pre><code>// Display an image from the network.\nAsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n\n// Display an image from the network with a placeholder, circle crop, and crossfade animation.\nAsyncImage(\n    model = ImageRequest.Builder(LocalContext.current)\n        .data(\"https://example.com/image.jpg\")\n        .crossfade(true)\n        .build(),\n    placeholder = painterResource(R.drawable.placeholder),\n    contentDescription = stringResource(R.string.description),\n    contentScale = ContentScale.Crop,\n    modifier = Modifier.clip(CircleShape)\n)\n</code></pre> <ul> <li>New: Introduce a public <code>DiskCache</code> API.<ul> <li>Use <code>ImageLoader.Builder.diskCache</code> and <code>DiskCache.Builder</code> to configure the disk cache.</li> <li>You should not use OkHttp's <code>Cache</code> with Coil 2.0. See here for more info.</li> <li><code>Cache-Control</code> and other cache headers are still supported - except <code>Vary</code> headers, as the cache only checks that the URLs match. Additionally, only responses with a response code in the range [200..300) are cached.</li> <li>Existing disk caches will be cleared when upgrading to 2.0.</li> </ul> </li> <li>The minimum supported API is now 21.</li> <li><code>ImageRequest</code>'s default <code>Scale</code> is now <code>Scale.FIT</code>.<ul> <li>This was changed to make <code>ImageRequest.scale</code> consistent with other classes that have a default <code>Scale</code>.</li> <li>Requests with an <code>ImageViewTarget</code> still have their <code>Scale</code> auto-detected.</li> </ul> </li> <li>Rework the image pipeline classes:<ul> <li><code>Mapper</code>, <code>Fetcher</code>, and <code>Decoder</code> have been refactored to be more flexible.</li> <li><code>Fetcher.key</code> has been replaced with a new <code>Keyer</code> interface. <code>Keyer</code> creates the cache key from the input data.</li> <li>Add <code>ImageSource</code>, which allows <code>Decoder</code>s to read <code>File</code>s directly using Okio's file system API.</li> </ul> </li> <li>Rework the Jetpack Compose integration:<ul> <li><code>rememberImagePainter</code> and <code>ImagePainter</code> have been renamed to <code>rememberAsyncImagePainter</code> and <code>AsyncImagePainter</code> respectively.</li> <li>Deprecate <code>LocalImageLoader</code>. Check out the deprecation message for more info.</li> </ul> </li> <li>Disable generating runtime not-null assertions.<ul> <li>If you use Java, passing null as a not-null annotated argument to a function will no longer throw a <code>NullPointerException</code> immediately. Kotlin's compile-time null safety guards against this happening.</li> <li>This change allows the library's size to be smaller.</li> </ul> </li> <li><code>Size</code> is now composed of two <code>Dimension</code> values for its width and height. <code>Dimension</code> can either be a positive pixel value or <code>Dimension.Undefined</code>. See here for more info.</li> <li><code>BitmapPool</code> and <code>PoolableViewTarget</code> have been removed from the library.</li> <li><code>VideoFrameFileFetcher</code> and <code>VideoFrameUriFetcher</code> have been removed from the library. Use <code>VideoFrameDecoder</code> instead, which supports all data sources.</li> <li><code>BlurTransformation</code> and <code>GrayscaleTransformation</code> are removed from the library. If you use them, you can copy their code into your project.</li> <li>Change <code>Transition.transition</code> to be a non-suspending function as it's no longer needed to suspend the transition until it completes.</li> <li>Add support for <code>bitmapFactoryMaxParallelism</code>, which restricts the maximum number of in-progress <code>BitmapFactory</code> operations. This value is 4 by default, which improves UI performance.</li> <li>Add support for <code>interceptorDispatcher</code>, <code>fetcherDispatcher</code>, <code>decoderDispatcher</code>, and <code>transformationDispatcher</code>.</li> <li>Add <code>GenericViewTarget</code>, which handles common <code>ViewTarget</code> logic.</li> <li>Add <code>ByteBuffer</code> to the default supported data types.</li> <li><code>Disposable</code> has been refactored and exposes the underlying <code>ImageRequest</code>'s job.</li> <li>Rework the <code>MemoryCache</code> API.</li> <li><code>ImageRequest.error</code> is now set on the <code>Target</code> if <code>ImageRequest.fallback</code> is null.</li> <li><code>Transformation.key</code> is replaced with <code>Transformation.cacheKey</code>.</li> <li>Update Kotlin to 1.6.10.</li> <li>Update Compose to 1.1.1.</li> <li>Update OkHttp to 4.9.3.</li> <li>Update Okio to 3.0.0.</li> </ul> <p>Changes from <code>2.0.0-rc03</code>: - Convert <code>Dimension.Original</code> to be <code>Dimension.Undefined</code>.     - This changes the semantics of the non-pixel dimension slightly to fix some edge cases (example) in the size system. - Load images with <code>Size.ORIGINAL</code> if ContentScale is None. - Fix applying <code>ImageView.load</code> builder argument first instead of last. - Fix not combining HTTP headers if response is not modified.</p>"},{"location":"changelog/#200-rc03-april-11-2022","title":"[2.0.0-rc03] - April 11, 2022","text":"<ul> <li>Remove the <code>ScaleResolver</code> interface.</li> <li>Convert <code>Size</code> constructors to functions.</li> <li>Change <code>Dimension.Pixels</code>'s <code>toString</code> to only be its pixel value.</li> <li>Guard against a rare crash in <code>SystemCallbacks.onTrimMemory</code>.</li> <li>Update Coroutines to 1.6.1.</li> </ul>"},{"location":"changelog/#200-rc02-march-20-2022","title":"[2.0.0-rc02] - March 20, 2022","text":"<ul> <li>Revert <code>ImageRequest</code>'s default size to be the size of the current display instead of <code>Size.ORIGINAL</code>.</li> <li>Fix <code>DiskCache.Builder</code> being marked as experimental. Only <code>DiskCache</code>'s methods are experimental.</li> <li>Fix case where loading an image into an <code>ImageView</code> with one dimension as <code>WRAP_CONTENT</code> would load the image at its original size instead of fitting it into the bounded dimension.</li> <li>Remove component functions from <code>MemoryCache.Key</code>, <code>MemoryCache.Value</code>, and <code>Parameters.Entry</code>.</li> </ul>"},{"location":"changelog/#200-rc01-march-2-2022","title":"[2.0.0-rc01] - March 2, 2022","text":"<p>Significant changes since <code>1.4.0</code>:</p> <ul> <li>The minimum supported API is now 21.</li> <li>Rework the Jetpack Compose integration.<ul> <li><code>rememberImagePainter</code> has been renamed to <code>rememberAsyncImagePainter</code>.</li> <li>Add support for <code>AsyncImage</code> and <code>SubcomposeAsyncImage</code>. Check out the documentation for more info.</li> <li>Deprecate <code>LocalImageLoader</code>. Check out the deprecation message for more info.</li> </ul> </li> <li>Coil 2.0 has its own disk cache implementation and no longer relies on OkHttp for disk caching.<ul> <li>Use <code>ImageLoader.Builder.diskCache</code> and <code>DiskCache.Builder</code> to configure the disk cache.</li> <li>You should not use OkHttp's <code>Cache</code> with Coil 2.0 as the cache can be corrupted if a thread is interrupted while writing to it.</li> <li><code>Cache-Control</code> and other cache headers are still supported - except <code>Vary</code> headers, as the cache only checks that the URLs match. Additionally, only responses with a response code in the range [200..300) are cached.</li> <li>Existing disk caches will be cleared when upgrading to 2.0.</li> </ul> </li> <li><code>ImageRequest</code>'s default <code>Scale</code> is now <code>Scale.FIT</code>.<ul> <li>This was changed to make <code>ImageRequest.scale</code> consistent with other classes that have a default <code>Scale</code>.</li> <li>Requests with an <code>ImageViewTarget</code> still have their <code>Scale</code> auto-detected.</li> </ul> </li> <li><code>ImageRequest</code>'s default size is now <code>Size.ORIGINAL</code>.</li> <li>Rework the image pipeline classes:<ul> <li><code>Mapper</code>, <code>Fetcher</code>, and <code>Decoder</code> have been refactored to be more flexible.</li> <li><code>Fetcher.key</code> has been replaced with a new <code>Keyer</code> interface. <code>Keyer</code> creates the cache key from the input data.</li> <li>Add <code>ImageSource</code>, which allows <code>Decoder</code>s to read <code>File</code>s directly using Okio's file system API.</li> </ul> </li> <li>Disable generating runtime not-null assertions.<ul> <li>If you use Java, passing null as a not-null annotated parameter to a function will no longer throw a <code>NullPointerException</code> immediately. Kotlin's compile-time null safety guards against this happening.</li> <li>This change allows the library's size to be smaller.</li> </ul> </li> <li><code>Size</code> is now composed of two <code>Dimension</code> values for its width and height. <code>Dimension</code> can either be a positive pixel value or <code>Dimension.Original</code>.</li> <li><code>BitmapPool</code> and <code>PoolableViewTarget</code> have been removed from the library.</li> <li><code>VideoFrameFileFetcher</code> and <code>VideoFrameUriFetcher</code> are removed from the library. Use <code>VideoFrameDecoder</code> instead, which supports all data sources.</li> <li><code>BlurTransformation</code> and <code>GrayscaleTransformation</code> are removed from the library. If you use them, you can copy their code into your project.</li> <li>Change <code>Transition.transition</code> to be a non-suspending function as it's no longer needed to suspend the transition until it completes.</li> <li>Add support for <code>bitmapFactoryMaxParallelism</code>, which restricts the maximum number of in-progress <code>BitmapFactory</code> operations. This value is 4 by default, which improves UI performance.</li> <li>Add support for <code>interceptorDispatcher</code>, <code>fetcherDispatcher</code>, <code>decoderDispatcher</code>, and <code>transformationDispatcher</code>.</li> <li>Add <code>GenericViewTarget</code>, which handles common <code>ViewTarget</code> logic.</li> <li>Add <code>ByteBuffer</code> to the default supported data types.</li> <li><code>Disposable</code> has been refactored and exposes the underlying <code>ImageRequest</code>'s job.</li> <li>Rework the <code>MemoryCache</code> API.</li> <li><code>ImageRequest.error</code> is now set on the <code>Target</code> if <code>ImageRequest.fallback</code> is null.</li> <li><code>Transformation.key</code> is replaced with <code>Transformation.cacheKey</code>.</li> <li>Update Kotlin to 1.6.10.</li> <li>Update Compose to 1.1.1.</li> <li>Update OkHttp to 4.9.3.</li> <li>Update Okio to 3.0.0.</li> </ul> <p>Changes since <code>2.0.0-alpha09</code>:</p> <ul> <li>Remove the <code>-Xjvm-default=all</code> compiler flag.</li> <li>Fix failing to load image if multiple requests with must-revalidate/e-tag are executed concurrently.</li> <li>Fix <code>DecodeUtils.isSvg</code> returning false if there is a new line character after the <code>&lt;svg</code> tag.</li> <li>Make <code>LocalImageLoader.provides</code> deprecation message clearer.</li> <li>Update Compose to 1.1.1.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.23.1.</li> </ul>"},{"location":"changelog/#200-alpha09-february-16-2022","title":"[2.0.0-alpha09] - February 16, 2022","text":"<ul> <li>Fix <code>AsyncImage</code> creating invalid constraints. (#1134)</li> <li>Add <code>ContentScale</code> argument to <code>AsyncImagePainter</code>. (#1144)<ul> <li>This should be set to the same value that's set on <code>Image</code> to ensure that the image is loaded at the correct size.</li> </ul> </li> <li>Add <code>ScaleResolver</code> to support lazily resolving the <code>Scale</code> for an <code>ImageRequest</code>. (#1134)<ul> <li><code>ImageRequest.scale</code> should be replaced by <code>ImageRequest.scaleResolver.scale()</code>.</li> </ul> </li> <li>Update Compose to 1.1.0.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.23.0.</li> <li>Update <code>androidx.lifecycle</code> to 2.4.1.</li> </ul>"},{"location":"changelog/#200-alpha08-february-7-2022","title":"[2.0.0-alpha08] - February 7, 2022","text":"<ul> <li>Update <code>DiskCache</code> and <code>ImageSource</code> to use to Okio's <code>FileSystem</code> API. (#1115)</li> </ul>"},{"location":"changelog/#200-alpha07-january-30-2022","title":"[2.0.0-alpha07] - January 30, 2022","text":"<ul> <li>Significantly improve <code>AsyncImage</code> performance and split <code>AsyncImage</code> into <code>AsyncImage</code> and <code>SubcomposeAsyncImage</code>. (#1048)<ul> <li><code>SubcomposeAsyncImage</code> provides <code>loading</code>/<code>success</code>/<code>error</code>/<code>content</code> slot APIs and uses subcomposition which has worse performance.</li> <li><code>AsyncImage</code> provides <code>placeholder</code>/<code>error</code>/<code>fallback</code> arguments to overwrite the <code>Painter</code> that's drawn when loading or if the request is unsuccessful. <code>AsyncImage</code> does not use subcomposition and has much better performance than <code>SubcomposeAsyncImage</code>.</li> <li>Remove <code>AsyncImagePainter.State</code> argument from <code>SubcomposeAsyncImage.content</code>. Use <code>painter.state</code> if needed.</li> <li>Add <code>onLoading</code>/<code>onSuccess</code>/<code>onError</code> callbacks to both <code>AsyncImage</code> and <code>SubcomposeAsyncImage</code>.</li> </ul> </li> <li>Deprecate <code>LocalImageLoader</code>. (#1101)</li> <li>Add support for <code>ImageRequest.tags</code>. (#1066)</li> <li>Move <code>isGif</code>, <code>isWebP</code>, <code>isAnimatedWebP</code>, <code>isHeif</code>, and <code>isAnimatedHeif</code> in <code>DecodeUtils</code> into coil-gif. Add <code>isSvg</code> to coil-svg. (#1117)</li> <li>Convert <code>FetchResult</code> and <code>DecodeResult</code> to be non-data classes. (#1114)</li> <li>Remove unused <code>DiskCache.Builder</code> context argument. (#1099)</li> <li>Fix scaling for bitmap resources with original size. (#1072)</li> <li>Fix failing to close <code>ImageDecoder</code> in <code>ImageDecoderDecoder</code>. (#1109)</li> <li>Fix incorrect scaling when converting a drawable to a bitmap. (#1084)</li> <li>Update Compose to 1.1.0-rc03.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.22.1-rc.</li> <li>Update <code>androidx.appcompat:appcompat-resources</code> to 1.4.1.</li> </ul>"},{"location":"changelog/#200-alpha06-december-24-2021","title":"[2.0.0-alpha06] - December 24, 2021","text":"<ul> <li>Add <code>ImageSource.Metadata</code> to support decoding from assets, resources, and content URIs without buffering or temporary files. (#1060)</li> <li>Delay executing the image request until <code>AsyncImage</code> has positive constraints. (#1028)</li> <li>Fix using <code>DefaultContent</code> for <code>AsyncImage</code> if <code>loading</code>, <code>success</code>, and <code>error</code> are all set. (#1026)</li> <li>Use androidx <code>LruCache</code> instead of the platform <code>LruCache</code>. (#1047)</li> <li>Update Kotlin to 1.6.10.</li> <li>Update Coroutines to 1.6.0.</li> <li>Update Compose to 1.1.0-rc01.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.22.0-rc.</li> <li>Update <code>androidx.collection</code> to 1.2.0.</li> </ul>"},{"location":"changelog/#200-alpha05-november-28-2021","title":"[2.0.0-alpha05] - November 28, 2021","text":"<ul> <li>Important: Refactor <code>Size</code> to support using the image's original size for either dimension.<ul> <li><code>Size</code> is now composed of two <code>Dimension</code> values for its width and height. <code>Dimension</code> can either be a positive pixel value or <code>Dimension.Original</code>.</li> <li>This change was made to better support unbounded width/height values (e.g. <code>wrap_content</code>, <code>Constraints.Infinity</code>) when one dimension is a fixed pixel value.</li> </ul> </li> <li>Fix: Support inspection mode (preview) for <code>AsyncImage</code>.</li> <li>Fix: <code>SuccessResult.memoryCacheKey</code> should always be <code>null</code> if <code>imageLoader.memoryCache</code> is null.</li> <li>Convert <code>ImageLoader</code>, <code>SizeResolver</code>, and <code>ViewSizeResolver</code> constructor-like <code>invoke</code> functions to top level functions.</li> <li>Make <code>CrossfadeDrawable</code> start and end drawables public API.</li> <li>Mutate <code>ImageLoader</code> placeholder/error/fallback drawables.</li> <li>Add default arguments to <code>SuccessResult</code>'s constructor.</li> <li>Depend on <code>androidx.collection</code> instead of <code>androidx.collection-ktx</code>.</li> <li>Update OkHttp to 4.9.3.</li> </ul>"},{"location":"changelog/#200-alpha04-november-22-2021","title":"[2.0.0-alpha04] - November 22, 2021","text":"<ul> <li>New: Add <code>AsyncImage</code> to <code>coil-compose</code>.<ul> <li><code>AsyncImage</code> is a composable that executes an <code>ImageRequest</code> asynchronously and renders the result.</li> <li><code>AsyncImage</code> is intended to replace <code>rememberImagePainter</code> for most use cases.</li> <li>Its API is not final and may change before the final 2.0 release.</li> <li>It has a similar API to <code>Image</code> and supports the same arguments: <code>Alignment</code>, <code>ContentScale</code>, <code>alpha</code>, <code>ColorFilter</code>, and <code>FilterQuality</code>.</li> <li>It supports overwriting what's drawn for each <code>AsyncImagePainter</code> state using the <code>content</code>, <code>loading</code>, <code>success</code>, and <code>error</code> arguments.</li> <li>It fixes a number of design issues that <code>rememberImagePainter</code> has with resolving image size and scale.</li> <li>Example usages:</li> </ul> </li> </ul> <pre><code>// Only draw the image.\nAsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null, // Avoid `null` and set this to a localized string if possible.\n)\n\n// Draw the image with a circle crop, crossfade, and overwrite the `loading` state.\nAsyncImage(\n    model = ImageRequest.Builder(LocalContext.current)\n        .data(\"https://example.com/image.jpg\")\n        .crossfade(true)\n        .build(),\n    contentDescription = null,\n    modifier = Modifier\n        .clip(CircleShape),\n    loading = {\n        CircularProgressIndicator()\n    },\n    contentScale = ContentScale.Crop\n)\n\n// Draw the image with a circle crop, crossfade, and overwrite all states.\nAsyncImage(\n    model = ImageRequest.Builder(LocalContext.current)\n        .data(\"https://example.com/image.jpg\")\n        .crossfade(true)\n        .build(),\n    contentDescription = null,\n    modifier = Modifier\n        .clip(CircleShape),\n    contentScale = ContentScale.Crop\n) { state -&gt;\n    if (state is AsyncImagePainter.State.Loading) {\n        CircularProgressIndicator()\n    } else {\n        AsyncImageContent() // Draws the image.\n    }\n}\n</code></pre> <ul> <li>Important: Rename <code>ImagePainter</code> to <code>AsyncImagePainter</code> and <code>rememberImagePainter</code> to <code>rememberAsyncImagePainter</code>.<ul> <li><code>ExecuteCallback</code> is no longer supported. To have the <code>AsyncImagePainter</code> skip waiting for <code>onDraw</code> to be called, set <code>ImageRequest.size(OriginalSize)</code> (or any size) instead.</li> <li>Add an optional <code>FilterQuality</code> argument to <code>rememberAsyncImagePainter</code>.</li> </ul> </li> <li>Use coroutines for cleanup operations in <code>DiskCache</code> and add <code>DiskCache.Builder.cleanupDispatcher</code>.</li> <li>Fix Compose preview for placeholder set using <code>ImageLoader.Builder.placeholder</code>.</li> <li>Mark <code>LocalImageLoader.current</code> with <code>@ReadOnlyComposable</code> to generate more efficient code.</li> <li>Update Compose to 1.1.0-beta03 and depend on <code>compose.foundation</code> instead of <code>compose.ui</code>.</li> <li>Update <code>androidx.appcompat-resources</code> to 1.4.0.</li> </ul>"},{"location":"changelog/#200-alpha03-november-12-2021","title":"[2.0.0-alpha03] - November 12, 2021","text":"<ul> <li>Add ability to load music thumbnails on Android 29+. (#967)</li> <li>Fix: Use <code>context.resources</code> to load resources for current package. (#968)</li> <li>Fix: <code>clear</code> -&gt; <code>dispose</code> replacement expression. (#970)</li> <li>Update Compose to 1.0.5.</li> <li>Update <code>accompanist-drawablepainter</code> to 0.20.2.</li> <li>Update Okio to 3.0.0.</li> <li>Update <code>androidx.annotation</code> to 1.3.0.</li> <li>Update <code>androidx.core</code> to 1.7.0.</li> <li>Update <code>androidx.lifecycle</code> to 2.4.0.<ul> <li>Remove dependency on <code>lifecycle-common-java8</code> as it's been merged into <code>lifecycle-common</code>.</li> </ul> </li> </ul>"},{"location":"changelog/#200-alpha02-october-24-2021","title":"[2.0.0-alpha02] - October 24, 2021","text":"<ul> <li>Add a new <code>coil-bom</code> artifact which includes a bill of materials.<ul> <li>Importing <code>coil-bom</code> allows you to depend on other Coil artifacts without specifying a version.</li> </ul> </li> <li>Fix failing to load an image when using <code>ExecuteCallback.Immediate</code>.</li> <li>Update Okio to 3.0.0-alpha.11.<ul> <li>This also resolves a compatibility issue with Okio 3.0.0-alpha.11.</li> </ul> </li> <li>Update Kotlin to 1.5.31.</li> <li>Update Compose to 1.0.4.</li> </ul>"},{"location":"changelog/#200-alpha01-october-11-2021","title":"[2.0.0-alpha01] - October 11, 2021","text":"<p>Coil 2.0.0 is the next major iteration of the library and has new features, performance improvements, API improvements, and various bug fixes. This release may be binary/source incompatible with future alpha releases until the stable release of 2.0.0.</p> <ul> <li>Important: The minimum supported API is now 21.</li> <li>Important: Enable <code>-Xjvm-default=all</code>.<ul> <li>This generates Java 8 default methods instead of using Kotlin's default interface method support. Check out this blog post for more information.</li> <li>You'll need to add <code>-Xjvm-default=all</code> or <code>-Xjvm-default=all-compatibility</code> to your build file as well. See here for how to do this.</li> </ul> </li> <li>Important: Coil now has its own disk cache implementation and no longer relies on OkHttp for disk caching.<ul> <li>This change was made to:<ul> <li>Better support thread interruption while decoding images. This improves performance when image requests are started and stopped in quick succession.</li> <li>Support exposing <code>ImageSource</code>s backed by <code>File</code>s. This avoids unnecessary copying when an Android API requires a <code>File</code> to decode (e.g. <code>MediaMetadataRetriever</code>).</li> <li>Support reading from/writing to the disk cache files directly.</li> </ul> </li> <li>Use <code>ImageLoader.Builder.diskCache</code> and <code>DiskCache.Builder</code> to configure the disk cache.</li> <li>You should not use OkHttp's <code>Cache</code> with Coil 2.0 as it can be corrupted if it's interrupted while writing to it.</li> <li><code>Cache-Control</code> and other cache headers are still supported - except <code>Vary</code> headers, as the cache only checks that the URLs match. Additionally, only responses with a response code in the range [200..300) are cached.</li> <li>Support for cache headers can be enabled or disabled using <code>ImageLoader.Builder.respectCacheHeaders</code>.</li> <li>Your existing disk cache will be cleared and rebuilt when upgrading to 2.0.</li> </ul> </li> <li>Important: <code>ImageRequest</code>'s default <code>Scale</code> is now <code>Scale.FIT</code><ul> <li>This was changed to make <code>ImageRequest.scale</code> consistent with other classes that have a default <code>Scale</code>.</li> <li>Requests with an <code>ImageViewTarget</code> still have their scale autodetected.</li> </ul> </li> <li>Significant changes to the image pipeline classes:<ul> <li><code>Mapper</code>, <code>Fetcher</code>, and <code>Decoder</code> have been refactored to be more flexible.</li> <li><code>Fetcher.key</code> has been replaced with a new <code>Keyer</code> interface. <code>Keyer</code> creates the cache key from the input data.</li> <li>Adds <code>ImageSource</code>, which allows <code>Decoder</code>s to decode <code>File</code>s directly.</li> </ul> </li> <li><code>BitmapPool</code> and <code>PoolableViewTarget</code> have been removed from the library. Bitmap pooling was removed because:<ul> <li>It's most effective on &lt;= API 23 and has become less effective with newer Android releases.</li> <li>Removing bitmap pooling allows Coil to use immutable bitmaps, which have performance benefits.</li> <li>There's runtime overhead to manage the bitmap pool.</li> <li>Bitmap pooling creates design restrictions on Coil's API as it requires tracking if a bitmap is eligible for pooling. Removing bitmap pooling allows Coil to expose the result <code>Drawable</code> in more places (e.g. <code>Listener</code>, <code>Disposable</code>). Additionally, this means Coil doesn't have to clear <code>ImageView</code>s, which has can cause issues.</li> <li>Bitmap pooling is error-prone. Allocating a new bitmap is much safer than attempting to re-use a bitmap that could still be in use.</li> </ul> </li> <li><code>MemoryCache</code> has been refactored to be more flexible.</li> <li>Disable generating runtime not-null assertions.<ul> <li>If you use Java, passing null as a not-null annotated parameter to a function will no longer throw a <code>NullPointerException</code> immediately. If you use Kotlin, there is essentially no change.</li> <li>This change allows the library's size to be smaller.</li> </ul> </li> <li><code>VideoFrameFileFetcher</code> and <code>VideoFrameUriFetcher</code> are removed from the library. Use <code>VideoFrameDecoder</code> instead, which supports all data sources.</li> <li>Adds support for <code>bitmapFactoryMaxParallelism</code>, which restricts the maximum number of in-progress <code>BitmapFactory</code> operations. This value is 4 by default, which improves UI performance.</li> <li>Adds support for <code>interceptorDispatcher</code>, <code>fetcherDispatcher</code>, <code>decoderDispatcher</code>, and <code>transformationDispatcher</code>.</li> <li><code>Disposable</code> has been refactored and exposes the underlying <code>ImageRequest</code>'s job.</li> <li>Change <code>Transition.transition</code> to be a non-suspending function as it's no longer needed to suspend the transition until it completes.</li> <li>Add <code>GenericViewTarget</code>, which handles common <code>ViewTarget</code> logic.</li> <li><code>BlurTransformation</code> and <code>GrayscaleTransformation</code> are removed from the library.<ul> <li>If you use them, you can copy their code into your project.</li> </ul> </li> <li><code>ImageRequest.error</code> is now set on the <code>Target</code> if <code>ImageRequest.fallback</code> is null.</li> <li><code>Transformation.key</code> is replaced with <code>Transformation.cacheKey</code>.</li> <li><code>ImageRequest.Listener</code> returns <code>SuccessResult</code>/<code>ErrorResult</code> in <code>onSuccess</code> and <code>onError</code> respectively.</li> <li>Add <code>ByteBuffer</code>s to the default supported data types.</li> <li>Remove <code>toString</code> implementations from several classes.</li> <li>Update OkHttp to 4.9.2.</li> <li>Update Okio to 3.0.0-alpha.10.</li> </ul>"},{"location":"changelog/#140-october-6-2021","title":"[1.4.0] - October 6, 2021","text":"<ul> <li>New: Add <code>ImageResult</code> to <code>ImagePainter.State.Success</code> and <code>ImagePainter.State.Error</code>. (#887)<ul> <li>This is a binary incompatible change to the signatures of <code>ImagePainter.State.Success</code> and <code>ImagePainter.State.Error</code>, however these APIs are marked as experimental.</li> </ul> </li> <li>Only execute <code>CrossfadeTransition</code> if <code>View.isShown</code> is <code>true</code>. Previously it would only check <code>View.isVisible</code>. (#898)</li> <li>Fix potential memory cache miss if scaling multiplier is slightly less than 1 due to a rounding issue. (#899)</li> <li>Make non-inlined <code>ComponentRegistry</code> methods public. (#925)</li> <li>Depend on <code>accompanist-drawablepainter</code> and remove Coil's custom <code>DrawablePainter</code> implementation. (#845)</li> <li>Remove use of a Java 8 method to guard against desugaring issue. (#924)</li> <li>Promote <code>ImagePainter.ExecuteCallback</code> to stable API. (#927)</li> <li>Update compileSdk to 31.</li> <li>Update Kotlin to 1.5.30.</li> <li>Update Coroutines to 1.5.2.</li> <li>Update Compose to 1.0.3.</li> </ul>"},{"location":"changelog/#132-august-4-2021","title":"[1.3.2] - August 4, 2021","text":"<ul> <li><code>coil-compose</code> now depends on <code>compose.ui</code> instead of <code>compose.foundation</code>.<ul> <li><code>compose.ui</code> is a smaller dependency as it's a subset of <code>compose.foundation</code>.</li> </ul> </li> <li>Update Jetpack Compose to 1.0.1.</li> <li>Update Kotlin to 1.5.21.</li> <li>Update Coroutines to 1.5.1.</li> <li>Update <code>androidx.exifinterface:exifinterface</code> to 1.3.3.</li> </ul>"},{"location":"changelog/#131-july-28-2021","title":"[1.3.1] - July 28, 2021","text":"<ul> <li>Update Jetpack Compose to <code>1.0.0</code>. Huge congrats to the Compose team on the stable release!</li> <li>Update <code>androidx.appcompat:appcompat-resources</code> to 1.3.1.</li> </ul>"},{"location":"changelog/#130-july-10-2021","title":"[1.3.0] - July 10, 2021","text":"<ul> <li>New: Add support for Jetpack Compose. It's based on Accompanist's Coil integration, but has a number of changes. Check out the docs for more info.</li> <li>Add <code>allowConversionToBitmap</code> to enable/disable the automatic bitmap conversion for <code>Transformation</code>s. (#775)</li> <li>Add <code>enforceMinimumFrameDelay</code> to <code>ImageDecoderDecoder</code> and <code>GifDecoder</code> to enable rewriting a GIF's frame delay if it's below a threshold. (#783)<ul> <li>This is disabled by default, but will be enabled by default in a future release.</li> </ul> </li> <li>Add support for enabling/disabling an <code>ImageLoader</code>'s internal network observer. (#741)</li> <li>Fix the density of bitmaps decoded by <code>BitmapFactoryDecoder</code>. (#776)</li> <li>Fix Licensee not finding Coil's licence url. (#774)</li> <li>Update <code>androidx.core:core-ktx</code> to 1.6.0.</li> </ul>"},{"location":"changelog/#122-june-4-2021","title":"[1.2.2] - June 4, 2021","text":"<ul> <li>Fix race condition while converting a drawable with shared state to a bitmap. (#771)</li> <li>Fix <code>ImageLoader.Builder.fallback</code> setting the <code>error</code> drawable instead of the <code>fallback</code> drawable.</li> <li>Fix incorrect data source returned by <code>ResourceUriFetcher</code>. (#770)</li> <li>Fix log check for no available file descriptors on API 26 and 27.</li> <li>Fix incorrect version check for platform vector drawable support. (#751)</li> <li>Update Kotlin (1.5.10).</li> <li>Update Coroutines (1.5.0).</li> <li>Update <code>androidx.appcompat:appcompat-resources</code> to 1.3.0.</li> <li>Update <code>androidx.core:core-ktx</code> to 1.5.0.</li> </ul>"},{"location":"changelog/#121-april-27-2021","title":"[1.2.1] - April 27, 2021","text":"<ul> <li>Fix <code>VideoFrameUriFetcher</code> attempting to handle http/https URIs. (#734</li> </ul>"},{"location":"changelog/#120-april-12-2021","title":"[1.2.0] - April 12, 2021","text":"<ul> <li>Important: Use an SVG's view bounds to calculate its aspect ratio in <code>SvgDecoder</code>. (#688)<ul> <li>Previously, <code>SvgDecoder</code> used an SVG's <code>width</code>/<code>height</code> elements to determine its aspect ratio, however this doesn't correctly follow the SVG specification.</li> <li>To revert to the old behaviour set <code>useViewBoundsAsIntrinsicSize = false</code> when constructing your <code>SvgDecoder</code>.</li> </ul> </li> <li>New: Add <code>VideoFrameDecoder</code> to support decoding video frames from any source. (#689)</li> <li>New: Support automatic SVG detection using the source's contents instead of just the MIME type. (#654)</li> <li>New: Support sharing resources using <code>ImageLoader.newBuilder()</code>. (#653)<ul> <li>Importantly, this enables sharing memory caches between <code>ImageLoader</code> instances.</li> </ul> </li> <li>New: Add support for animated image transformations using <code>AnimatedTransformation</code>. (#659)</li> <li>New: Add support for start/end callbacks for animated drawables. (#676)</li> </ul> <ul> <li>Fix parsing EXIF data for HEIF/HEIC files. (#664)</li> <li>Fix not using the <code>EmptyBitmapPool</code> implementation if bitmap pooling is disabled. (#638)<ul> <li>Without this fix bitmap pooling was still disabled properly, however it used a more heavyweight <code>BitmapPool</code> implementation.</li> </ul> </li> <li>Fix case where <code>MovieDrawable.getOpacity</code> would incorrectly return transparent. (#682)</li> <li>Guard against the default temporary directory not existing. (#683)</li> </ul> <ul> <li>Build using the JVM IR backend. (#670)</li> <li>Update Kotlin (1.4.32).</li> <li>Update Coroutines (1.4.3).</li> <li>Update OkHttp (3.12.13).</li> <li>Update <code>androidx.lifecycle:lifecycle-common-java8</code> to 2.3.1.</li> </ul>"},{"location":"changelog/#111-january-11-2021","title":"[1.1.1] - January 11, 2021","text":"<ul> <li>Fix a case where <code>ViewSizeResolver.size</code> could throw an <code>IllegalStateException</code> due to resuming a coroutine more than once.</li> <li>Fix <code>HttpFetcher</code> blocking forever if called from the main thread.<ul> <li>Requests that are forced to execute on the main thread using <code>ImageRequest.dispatcher(Dispatchers.Main.immediate)</code> will fail with a <code>NetworkOnMainThreadException</code> unless <code>ImageRequest.networkCachePolicy</code> is set to <code>CachePolicy.DISABLED</code> or <code>CachePolicy.WRITE_ONLY</code>.</li> </ul> </li> <li>Rotate video frames from <code>VideoFrameFetcher</code> if the video has rotation metadata.</li> <li>Update Kotlin (1.4.21).</li> <li>Update Coroutines (1.4.2).</li> <li>Update Okio (2.10.0).</li> <li>Update <code>androidx.exifinterface:exifinterface</code> (1.3.2).</li> </ul>"},{"location":"changelog/#110-november-24-2020","title":"[1.1.0] - November 24, 2020","text":"<ul> <li>Important: Change the <code>CENTER</code> and <code>MATRIX</code> <code>ImageView</code> scale types to resolve to <code>OriginalSize</code>. (#587)<ul> <li>This change only affects the implicit size resolution algorithm when the request's size isn't specified explicitly.</li> <li>This change was made to ensure that the visual result of an image request is consistent with <code>ImageView.setImageResource</code>/<code>ImageView.setImageURI</code>. To revert to the old behaviour set a <code>ViewSizeResolver</code> when constructing your request.</li> </ul> </li> <li>Important: Return the display size from <code>ViewSizeResolver</code> if the view's layout param is <code>WRAP_CONTENT</code>. (#562)<ul> <li>Previously, we would only return the display size if the view has been fully laid out. This change makes the typical behaviour more consistent and intuitive.</li> </ul> </li> <li>Add the ability to control alpha pre-multiplication. (#569)</li> <li>Support preferring exact intrinsic size in <code>CrossfadeDrawable</code>. (#585)</li> <li>Check for the full GIF header including version. (#564)</li> <li>Add an empty bitmap pool implementation. (#561)</li> <li>Make <code>EventListener.Factory</code> a functional interface. (#575)</li> <li>Stabilize <code>EventListener</code>. (#574)</li> <li>Add <code>String</code> overload for <code>ImageRequest.Builder.placeholderMemoryCacheKey</code>.</li> <li>Add <code>@JvmOverloads</code> to the <code>ViewSizeResolver</code> constructor.</li> <li>Fix: Mutate start/end drawables in <code>CrossfadeDrawable</code>. (#572)</li> <li>Fix: Fix GIF not playing on second load. (#577)</li> <li>Update Kotlin (1.4.20) and migrate to the <code>kotlin-parcelize</code> plugin.</li> <li>Update Coroutines (1.4.1).</li> </ul>"},{"location":"changelog/#100-october-22-2020","title":"[1.0.0] - October 22, 2020","text":"<p>Changes since <code>0.13.0</code>: - Add <code>Context.imageLoader</code> extension function. (#534) - Add <code>ImageLoader.executeBlocking</code> extension function. (#537) - Don't shutdown previous singleton image loader if replaced. (#533)</p> <p>Changes since <code>1.0.0-rc3</code>: - Fix: Guard against missing/invalid ActivityManager. (#541) - Fix: Allow OkHttp to cache unsuccessful responses. (#551) - Update Kotlin to 1.4.10. - Update Okio to 2.9.0. - Update <code>androidx.exifinterface:exifinterface</code> to 1.3.1.</p>"},{"location":"changelog/#100-rc3-september-21-2020","title":"[1.0.0-rc3] - September 21, 2020","text":"<ul> <li>Revert using the <code>-Xjvm-default=all</code> compiler flag due to instability.<ul> <li>This is a source compatible, but binary incompatible change from previous release candidate versions.</li> </ul> </li> <li>Add <code>Context.imageLoader</code> extension function. (#534)</li> <li>Add <code>ImageLoader.executeBlocking</code> extension function. (#537)</li> <li>Don't shutdown previous singleton image loader if replaced. (#533)</li> <li>Update AndroidX dependencies:<ul> <li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.3.0</li> </ul> </li> </ul>"},{"location":"changelog/#100-rc2-september-3-2020","title":"[1.0.0-rc2] - September 3, 2020","text":"<ul> <li>This release requires Kotlin 1.4.0 or above.</li> <li>All the changes present in 0.13.0.</li> <li>Depend on the base Kotlin <code>stdlib</code> instead of <code>stdlib-jdk8</code>.</li> </ul>"},{"location":"changelog/#0130-september-3-2020","title":"[0.13.0] - September 3, 2020","text":"<ul> <li>Important: Launch the Interceptor chain on the main thread by default. (#513)<ul> <li>This largely restores the behaviour from <code>0.11.0</code> and below where the memory cache would be checked synchronously on the main thread.</li> <li>To revert to using the same behaviour as <code>0.12.0</code> where the memory cache is checked on <code>ImageRequest.dispatcher</code>, set <code>ImageLoader.Builder.launchInterceptorChainOnMainThread(false)</code>.</li> <li>See <code>launchInterceptorChainOnMainThread</code> for more information.</li> </ul> </li> </ul> <ul> <li>Fix: Fix potential memory leak if request is started on a <code>ViewTarget</code> in a detached fragment. (#518)</li> <li>Fix: Use <code>ImageRequest.context</code> to load resource URIs. (#517)</li> <li>Fix: Fix race condition that could cause subsequent requests to not be saved to the disk cache. (#510)</li> <li>Fix: Use <code>blockCountLong</code> and <code>blockSizeLong</code> on API 18.</li> </ul> <ul> <li>Make <code>ImageLoaderFactory</code> a fun interface.</li> <li>Add <code>ImageLoader.Builder.addLastModifiedToFileCacheKey</code> which allows you to enable/disable adding the last modified timestamp to the memory cache key for an image loaded from a <code>File</code>.</li> </ul> <ul> <li>Update Kotlin to 1.4.0.</li> <li>Update Coroutines to 1.3.9.</li> <li>Update Okio to 2.8.0.</li> </ul>"},{"location":"changelog/#100-rc1-august-18-2020","title":"[1.0.0-rc1] - August 18, 2020","text":"<ul> <li>This release requires Kotlin 1.4.0 or above.</li> <li>Update Kotlin to 1.4.0 and enable <code>-Xjvm-default=all</code>.<ul> <li>See here for how to enable <code>-Xjvm-default=all</code> in your build file.</li> <li>This generates Java 8 default methods for default Kotlin interface methods.</li> </ul> </li> <li>Remove all existing deprecated methods in 0.12.0.</li> <li>Update Coroutines to 1.3.9.</li> </ul>"},{"location":"changelog/#0120-august-18-2020","title":"[0.12.0] - August 18, 2020","text":"<ul> <li>Breaking: <code>LoadRequest</code> and <code>GetRequest</code> have been replaced with <code>ImageRequest</code>:<ul> <li><code>ImageLoader.execute(LoadRequest)</code> -&gt; <code>ImageLoader.enqueue(ImageRequest)</code></li> <li><code>ImageLoader.execute(GetRequest)</code> -&gt; <code>ImageLoader.execute(ImageRequest)</code></li> <li><code>ImageRequest</code> implements <code>equals</code>/<code>hashCode</code>.</li> </ul> </li> <li>Breaking: A number of classes were renamed and/or changed package:<ul> <li><code>coil.request.RequestResult</code> -&gt; <code>coil.request.ImageResult</code></li> <li><code>coil.request.RequestDisposable</code> -&gt; <code>coil.request.Disposable</code></li> <li><code>coil.bitmappool.BitmapPool</code> -&gt; <code>coil.bitmap.BitmapPool</code></li> <li><code>coil.DefaultRequestOptions</code> -&gt; <code>coil.request.DefaultRequestOptions</code></li> </ul> </li> <li>Breaking: <code>SparseIntArraySet</code> has been removed from the public API.</li> <li>Breaking: <code>TransitionTarget</code> no longer implements <code>ViewTarget</code>.</li> <li>Breaking: <code>ImageRequest.Listener.onSuccess</code>'s signature has changed to return an <code>ImageResult.Metadata</code> instead of just a <code>DataSource</code>.</li> <li>Breaking: Remove support for <code>LoadRequest.aliasKeys</code>. This API is better handled with direct read/write access to the memory cache.</li> </ul> <ul> <li>Important: Values in the memory cache are no longer resolved synchronously (if called from the main thread).<ul> <li>This change was also necessary to support executing <code>Interceptor</code>s on a background dispatcher.</li> <li>This change also moves more work off the main thread, improving performance.</li> </ul> </li> <li>Important: <code>Mappers</code> are now executed on a background dispatcher. As a side effect, automatic bitmap sampling is no longer automatically supported. To achieve the same effect, use the <code>MemoryCache.Key</code> of a previous request as the <code>placeholderMemoryCacheKey</code> of the subsequent request. See here for an example.<ul> <li>The <code>placeholderMemoryCacheKey</code> API offers more freedom as you can \"link\" two image requests with different data (e.g. different URLs for small/large images).</li> </ul> </li> <li>Important: Coil's <code>ImageView</code> extension functions have been moved from the <code>coil.api</code> package to the <code>coil</code> package.<ul> <li>Use find + replace to refactor <code>import coil.api.load</code> -&gt; <code>import coil.load</code>. Unfortunately, it's not possible to use Kotlin's <code>ReplaceWith</code> functionality to replace imports.</li> </ul> </li> <li>Important: Use standard crossfade if drawables are not the same image.</li> <li>Important: Prefer immutable bitmaps on API 24+.</li> <li>Important: <code>MeasuredMapper</code> has been deprecated in favour of the new <code>Interceptor</code> interface. See here for an example of how to convert a <code>MeasuredMapper</code> into an <code>Interceptor</code>.<ul> <li><code>Interceptor</code> is a much less restrictive API that allows for a wider range of custom logic.</li> </ul> </li> <li>Important: <code>ImageRequest.data</code> is now not null. If you create an <code>ImageRequest</code> without setting its data it will return <code>NullRequestData</code> as its data.</li> </ul> <ul> <li>New: Add support for direct read/write access to an <code>ImageLoader</code>'s <code>MemoryCache</code>. See the docs for more information.</li> <li>New: Add support for <code>Interceptor</code>s. See the docs for more information. Coil's <code>Interceptor</code> design is heavily inspired by OkHttp's!</li> <li>New: Add the ability to enable/disable bitmap pooling using <code>ImageLoader.Builder.bitmapPoolingEnabled</code>.<ul> <li>Bitmap pooling is most effective on API 23 and below, but may still be benificial on API 24 and up (by eagerly calling <code>Bitmap.recycle</code>).</li> </ul> </li> <li>New: Support thread interruption while decoding.</li> </ul> <ul> <li>Fix parsing multiple segments in content-type header.</li> <li>Rework bitmap reference counting to be more robust.</li> <li>Fix WebP decoding on API &lt; 19 devices.</li> <li>Expose FetchResult and DecodeResult in the EventListener API.</li> </ul> <ul> <li>Compile with SDK 30.</li> <li>Update Coroutines to 1.3.8.</li> <li>Update OkHttp to 3.12.12.</li> <li>Update Okio to 2.7.0.</li> <li>Update AndroidX dependencies:<ul> <li><code>androidx.appcompat:appcompat-resources</code> -&gt; 1.2.0</li> <li><code>androidx.core:core-ktx</code> -&gt; 1.3.1</li> </ul> </li> </ul>"},{"location":"changelog/#0110-may-14-2020","title":"[0.11.0] - May 14, 2020","text":"<ul> <li>Breaking: This version removes all existing deprecated functions.<ul> <li>This enables removing Coil's <code>ContentProvider</code> so it doesn't run any code at app startup.</li> </ul> </li> <li>Breaking: Convert <code>SparseIntArraySet.size</code> to a val. (#380)</li> <li>Breaking: Move <code>Parameters.count()</code> to an extension function. (#403)</li> <li>Breaking: Make <code>BitmapPool.maxSize</code> an Int. (#404)</li> </ul> <ul> <li>Important: Make <code>ImageLoader.shutdown()</code> optional (similar to <code>OkHttpClient</code>). (#385)</li> </ul> <ul> <li>Fix: Fix AGP 4.1 compatibility. (#386)</li> <li>Fix: Fix measuring GONE views. (#397)</li> </ul> <ul> <li>Reduce the default memory cache size to 20%. (#390)<ul> <li>To restore the existing behaviour set <code>ImageLoaderBuilder.availableMemoryPercentage(0.25)</code> when creating your <code>ImageLoader</code>.</li> </ul> </li> <li>Update Coroutines to 1.3.6.</li> <li>Update OkHttp to 3.12.11.</li> </ul>"},{"location":"changelog/#0101-april-26-2020","title":"[0.10.1] - April 26, 2020","text":"<ul> <li>Fix OOM when decoding large PNGs on API 23 and below. (#372).<ul> <li>This disables decoding EXIF orientation for PNG files. PNG EXIF orientation is very rarely used and reading PNG EXIF data (even if it's empty) requires buffering the entire file into memory, which is bad for performance.</li> </ul> </li> <li>Minor Java compatibility improvements to <code>SparseIntArraySet</code>.</li> </ul> <ul> <li>Update Okio to 2.6.0.</li> </ul>"},{"location":"changelog/#0100-april-20-2020","title":"[0.10.0] - April 20, 2020","text":""},{"location":"changelog/#highlights","title":"Highlights","text":"<ul> <li> <p>This version deprecates most of the DSL API in favour of using the builders directly. Here's what the change looks like:</p> <pre><code>// 0.9.5 (old)\nval imageLoader = ImageLoader(context) {\n    bitmapPoolPercentage(0.5)\n    crossfade(true)\n}\n\nval disposable = imageLoader.load(context, \"https://example.com/image.jpg\") {\n    target(imageView)\n}\n\nval drawable = imageLoader.get(\"https://example.com/image.jpg\") {\n    size(512, 512)\n}\n\n// 0.10.0 (new)\nval imageLoader = ImageLoader.Builder(context)\n    .bitmapPoolPercentage(0.5)\n    .crossfade(true)\n    .build()\n\nval request = LoadRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target(imageView)\n    .build()\nval disposable = imageLoader.execute(request)\n\nval request = GetRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .size(512, 512)\n    .build()\nval drawable = imageLoader.execute(request).drawable\n</code></pre> <ul> <li>If you're using the <code>io.coil-kt:coil</code> artifact, you can call <code>Coil.execute(request)</code> to execute the request with the singleton <code>ImageLoader</code>.</li> </ul> </li> <li> <p><code>ImageLoader</code>s now have a weak reference memory cache that tracks weak references to images once they're evicted from the strong reference memory cache.</p> <ul> <li>This means an image will always be returned from an <code>ImageLoader</code>'s memory cache if there's still a strong reference to it.</li> <li>Generally, this should make the memory cache much more predictable and increase its hit rate.</li> <li>This behaviour can be enabled/disabled with <code>ImageLoaderBuilder.trackWeakReferences</code>.</li> </ul> </li> <li> <p>Add a new artifact, <code>io.coil-kt:coil-video</code>, to decode specific frames from a video file. Read more here.</p> </li> <li> <p>Add a new EventListener API for tracking metrics.</p> </li> <li> <p>Add ImageLoaderFactory which can be implemented by your <code>Application</code> to simplify singleton initialization.</p> </li> </ul>"},{"location":"changelog/#full-release-notes","title":"Full Release Notes","text":"<ul> <li>Important: Deprecate DSL syntax in favour of builder syntax. (#267)</li> <li>Important: Deprecate <code>Coil</code> and <code>ImageLoader</code> extension functions. (#322)</li> <li>Breaking: Return sealed <code>RequestResult</code> type from <code>ImageLoader.execute(GetRequest)</code>. (#349)</li> <li>Breaking: Rename <code>ExperimentalCoil</code> to <code>ExperimentalCoilApi</code>. Migrate from <code>@Experimental</code> to <code>@RequiresOptIn</code>. (#306)</li> <li>Breaking: Replace <code>CoilLogger</code> with <code>Logger</code> interface. (#316)</li> <li>Breaking: Rename destWidth/destHeight to dstWidth/dstHeight. (#275)</li> <li>Breaking: Re-arrange <code>MovieDrawable</code>'s constructor params. (#272)</li> <li>Breaking: <code>Request.Listener</code>'s methods now receive the full <code>Request</code> object instead of just its data.</li> <li>Breaking: <code>GetRequestBuilder</code> now requires a <code>Context</code> in its constructor.</li> <li>Breaking: Several properties on <code>Request</code> are now nullable.</li> <li>Behaviour change: Include parameter values in the cache key by default. (#319)</li> <li>Behaviour change: Slightly adjust <code>Request.Listener.onStart()</code> timing to be called immediately after <code>Target.onStart()</code>. (#348)</li> </ul> <ul> <li>New: Add <code>WeakMemoryCache</code> implementation. (#295)</li> <li>New: Add <code>coil-video</code> to support decoding video frames. (#122)</li> <li>New: Introduce <code>EventListener</code>. (#314)</li> <li>New: Introduce <code>ImageLoaderFactory</code>. (#311)</li> <li>New: Support animated HEIF image sequences on Android 11. (#297)</li> <li>New: Improve Java compatibility. (#262)</li> <li>New: Support setting a default <code>CachePolicy</code>. (#307)</li> <li>New: Support setting a default <code>Bitmap.Config</code>. (#342)</li> <li>New: Add <code>ImageLoader.invalidate(key)</code> to clear a single memory cache item (#55)</li> <li>New: Add debug logs to explain why a cached image is not reused. (#346)</li> <li>New: Support <code>error</code> and <code>fallback</code> drawables for get requests.</li> </ul> <ul> <li>Fix: Fix memory cache miss when Transformation reduces input bitmap's size. (#357)</li> <li>Fix: Ensure radius is below RenderScript max in BlurTransformation. (#291)</li> <li>Fix: Fix decoding high colour depth images. (#358)</li> <li>Fix: Disable <code>ImageDecoderDecoder</code> crash work-around on Android 11 and above. (#298)</li> <li>Fix: Fix failing to read EXIF data on pre-API 23. (#331)</li> <li>Fix: Fix incompatibility with Android R SDK. (#337)</li> <li>Fix: Only enable inexact size if <code>ImageView</code> has a matching <code>SizeResolver</code>. (#344)</li> <li>Fix: Allow cached images to be at most one pixel off requested size. (#360)</li> <li>Fix: Skip crossfade transition if view is not visible. (#361)</li> </ul> <ul> <li>Deprecate <code>CoilContentProvider</code>. (#293)</li> <li>Annotate several <code>ImageLoader</code> methods with <code>@MainThread</code>.</li> <li>Avoid creating a <code>LifecycleCoroutineDispatcher</code> if the lifecycle is currently started. (#356)</li> <li>Use full package name for <code>OriginalSize.toString()</code>.</li> <li>Preallocate when decoding software bitmap. (#354)</li> </ul> <ul> <li>Update Kotlin to 1.3.72.</li> <li>Update Coroutines to 1.3.5.</li> <li>Update OkHttp to 3.12.10.</li> <li>Update Okio to 2.5.0.</li> <li>Update AndroidX dependencies:<ul> <li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.2.0</li> </ul> </li> </ul>"},{"location":"changelog/#095-february-6-2020","title":"[0.9.5] - February 6, 2020","text":"<ul> <li>Fix: Ensure a view is attached before checking if it is hardware accelerated. This fixes a case where requesting a hardware bitmap could miss the memory cache.</li> </ul> <ul> <li>Update AndroidX dependencies:<ul> <li><code>androidx.core:core-ktx</code> -&gt; 1.2.0</li> </ul> </li> </ul>"},{"location":"changelog/#094-february-3-2020","title":"[0.9.4] - February 3, 2020","text":"<ul> <li>Fix: Respect aspect ratio when downsampling in ImageDecoderDecoder. Thanks @zhanghai.</li> </ul> <ul> <li>Previously bitmaps would be returned from the memory cache as long as their config was greater than or equal to the config specified in the request. For example, if you requested an <code>ARGB_8888</code> bitmap, it would be possible to have a <code>RGBA_F16</code> bitmap returned to you from the memory cache. Now, the cached config and the requested config must be equal.</li> <li>Make <code>scale</code> and <code>durationMillis</code> public in <code>CrossfadeDrawable</code> and <code>CrossfadeTransition</code>.</li> </ul>"},{"location":"changelog/#093-february-1-2020","title":"[0.9.3] - February 1, 2020","text":"<ul> <li>Fix: Translate child drawable inside <code>ScaleDrawable</code> to ensure it is centered.</li> <li>Fix: Fix case where GIFs and SVGs would not fill bounds completely.</li> </ul> <ul> <li>Defer calling <code>HttpUrl.get()</code> to background thread.</li> <li>Improve BitmapFactory null bitmap error message.</li> <li>Add 3 devices to hardware bitmap blacklist. (#264)</li> </ul> <ul> <li>Update AndroidX dependencies:<ul> <li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.2.0</li> </ul> </li> </ul>"},{"location":"changelog/#092-january-19-2020","title":"[0.9.2] - January 19, 2020","text":"<ul> <li>Fix: Fix decoding GIFs on pre-API 19. Thanks @mario.</li> <li>Fix: Fix rasterized vector drawables not being marked as sampled.</li> <li>Fix: Throw exception if Movie dimensions are &lt;= 0.</li> <li>Fix: Fix CrossfadeTransition not being resumed for a memory cache event.</li> <li>Fix: Prevent returning hardware bitmaps to all target methods if disallowed.</li> <li>Fix: Fix MovieDrawable not positioning itself in the center of its bounds.</li> </ul> <ul> <li>Remove automatic scaling from CrossfadeDrawable.</li> <li>Make <code>BitmapPool.trimMemory</code> public.</li> <li>Wrap AnimatedImageDrawable in a ScaleDrawable to ensure it fills its bounds.</li> <li>Add @JvmOverloads to RequestBuilder.setParameter.</li> <li>Set an SVG's view box to its size if the view box is not set.</li> <li>Pass state and level changes to CrossfadeDrawable children.</li> </ul> <ul> <li>Update OkHttp to 3.12.8.</li> </ul>"},{"location":"changelog/#091-december-30-2019","title":"[0.9.1] - December 30, 2019","text":"<ul> <li>Fix: Fix crash when calling <code>LoadRequestBuilder.crossfade(false)</code>.</li> </ul>"},{"location":"changelog/#090-december-30-2019","title":"[0.9.0] - December 30, 2019","text":"<ul> <li>Breaking: <code>Transformation.transform</code> now includes a <code>Size</code> parameter. This is to support transformations that change the size of the output <code>Bitmap</code> based on the size of the <code>Target</code>. Requests with transformations are now also exempt from image sampling.</li> <li>Breaking: <code>Transformation</code>s are now applied to any type of <code>Drawable</code>. Before, <code>Transformation</code>s would be skipped if the input <code>Drawable</code> was not a <code>BitmapDrawable</code>. Now, <code>Drawable</code>s are rendered to a <code>Bitmap</code> before applying the <code>Transformation</code>s.</li> <li>Breaking: Passing <code>null</code> data to <code>ImageLoader.load</code> is now treated as an error and calls <code>Target.onError</code> and <code>Request.Listener.onError</code> with a <code>NullRequestDataException</code>. This change was made to support setting a <code>fallback</code> drawable if data is <code>null</code>. Previously the request was silently ignored.</li> <li>Breaking: <code>RequestDisposable.isDisposed</code> is now a <code>val</code>.</li> </ul> <ul> <li>New: Support for custom transitions. See here for more info. Transitions are marked as experimental as the API is incubating.</li> <li>New: Add <code>RequestDisposable.await</code> to support suspending while a <code>LoadRequest</code> is in progress.</li> <li>New: Support setting a <code>fallback</code> drawable when request data is null.</li> <li>New: Add <code>Precision</code>. This makes the size of the output <code>Drawable</code> exact while enabling scaling optimizations for targets that support scaling (e.g. <code>ImageViewTarget</code>). See its documentation for more information.</li> <li>New: Add <code>RequestBuilder.aliasKeys</code> to support matching multiple cache keys.</li> </ul> <ul> <li>Fix: Make RequestDisposable thread safe.</li> <li>Fix: <code>RoundedCornersTransformation</code> now crops to the size of the target then rounds the corners.</li> <li>Fix: <code>CircleCropTransformation</code> now crops from the center.</li> <li>Fix: Add several devices to the hardware bitmap blacklist.</li> <li>Fix: Preserve aspect ratio when converting a Drawable to a Bitmap.</li> <li>Fix: Fix possible memory cache miss with <code>Scale.FIT</code>.</li> <li>Fix: Ensure Parameters iteration order is deterministic.</li> <li>Fix: Defensive copy when creating Parameters and ComponentRegistry.</li> <li>Fix: Ensure RealBitmapPool's maxSize &gt;= 0.</li> <li>Fix: Show the start drawable if CrossfadeDrawable is not animating or done.</li> <li>Fix: Adjust CrossfadeDrawable to account for children with undefined intrinsic size.</li> <li>Fix: Fix <code>MovieDrawable</code> not scaling properly.</li> </ul> <ul> <li>Update Kotlin to 1.3.61.</li> <li>Update Kotlin Coroutines to 1.3.3.</li> <li>Update Okio to 2.4.3.</li> <li>Update AndroidX dependencies:<ul> <li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.1.0</li> </ul> </li> </ul>"},{"location":"changelog/#080-october-22-2019","title":"[0.8.0] - October 22, 2019","text":"<ul> <li>Breaking: <code>SvgDrawable</code> has been removed. Instead, SVGs are now prerendered to <code>BitmapDrawable</code>s by <code>SvgDecoder</code>. This makes SVGs significantly less expensive to render on the main thread. Also <code>SvgDecoder</code> now requires a <code>Context</code> in its constructor.</li> <li>Breaking: <code>SparseIntArraySet</code> extension functions have moved to the <code>coil.extension</code> package.</li> </ul> <ul> <li>New: Support setting per-request network headers. See here for more info.</li> <li>New: Add new <code>Parameters</code> API to support passing custom data through the image pipeline.</li> <li>New: Support individual corner radii in RoundedCornersTransformation. Thanks @khatv911.</li> <li>New: Add <code>ImageView.clear()</code> to support proactively freeing resources.</li> <li>New: Support loading resources from other packages.</li> <li>New: Add <code>subtractPadding</code> attribute to ViewSizeResolver to enable/disable subtracting a view's padding when measuring.</li> <li>New: Improve HttpUrlFetcher MIME type detection.</li> <li>New: Add Animatable2Compat support to MovieDrawable and CrossfadeDrawable.</li> <li>New: Add <code>RequestBuilder&lt;*&gt;.repeatCount</code> to set the repeat count for a GIF.</li> <li>New: Add BitmapPool creation to the public API.</li> <li>New: Annotate Request.Listener methods with <code>@MainThread</code>.</li> </ul> <ul> <li>Fix: Make CoilContentProvider visible for testing.</li> <li>Fix: Include night mode in the resource cache key.</li> <li>Fix: Work around ImageDecoder native crash by temporarily writing the source to disk.</li> <li>Fix: Correctly handle contact display photo uris.</li> <li>Fix: Pass tint to CrossfadeDrawable's children.</li> <li>Fix: Fix several instances of not closing sources.</li> <li>Fix: Add a blacklist of devices with broken/incomplete hardware bitmap implementations.</li> </ul> <ul> <li>Compile against SDK 29.</li> <li>Update Kotlin Coroutines to 1.3.2.</li> <li>Update OkHttp to 3.12.6.</li> <li>Update Okio to 2.4.1.</li> <li>Change <code>appcompat-resources</code> from <code>compileOnly</code> to <code>implementation</code> for <code>coil-base</code>.</li> </ul>"},{"location":"changelog/#070-september-8-2019","title":"[0.7.0] - September 8, 2019","text":"<ul> <li>Breaking: <code>ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() -&gt; Unit)</code> is now <code>ImageLoaderBuilder.okHttpClient(() -&gt; OkHttpClient)</code>. The initializer is also now called lazily on a background thread. If you set a custom <code>OkHttpClient</code> you must set <code>OkHttpClient.cache</code> to enable disk caching. If you don't set a custom <code>OkHttpClient</code>, Coil will create the default <code>OkHttpClient</code> which has disk caching enabled. The default Coil cache can be created using <code>CoilUtils.createDefaultCache(context)</code>. e.g.:</li> </ul> <pre><code>val imageLoader = ImageLoader(context) {\n    okHttpClient {\n        OkHttpClient.Builder()\n            .cache(CoilUtils.createDefaultCache(context))\n            .build()\n    }\n}\n</code></pre> <ul> <li>Breaking: <code>Fetcher.key</code> no longer has a default implementation.</li> <li>Breaking: Previously, only the first applicable <code>Mapper</code> would be called. Now, all applicable <code>Mapper</code>s will be called. No API changes.</li> <li>Breaking: Minor named parameter renaming: <code>url</code> -&gt; <code>uri</code>, <code>factory</code> -&gt; <code>initializer</code>.</li> </ul> <ul> <li>New: <code>coil-svg</code> artifact, which has an <code>SvgDecoder</code> that supports automatically decoding SVGs. Powered by AndroidSVG. Thanks @rharter.</li> <li>New: <code>load(String)</code> and <code>get(String)</code> now accept any of the supported Uri schemes. e.g. You can now do <code>imageView.load(\"file:///path/to/file.jpg\")</code>.</li> <li>New: Refactor ImageLoader to use <code>Call.Factory</code> instead of <code>OkHttpClient</code>. This allows lazy initialization of the networking resources using <code>ImageLoaderBuilder.okHttpClient { OkHttpClient() }</code>. Thanks @ZacSweers.</li> <li>New: <code>RequestBuilder.decoder</code> to explicitly set the decoder for a request.</li> <li>New: <code>ImageLoaderBuilder.allowHardware</code> to enable/disable hardware bitmaps by default for an ImageLoader.</li> <li>New: Support software rendering in ImageDecoderDecoder.</li> </ul> <ul> <li>Fix: Multiple bugs with loading vector drawables.</li> <li>Fix: Support WRAP_CONTENT View dimensions.</li> <li>Fix: Support parsing EXIF data longer than 8192 bytes.</li> <li>Fix: Don't stretch drawables with different aspect ratios when crossfading.</li> <li>Fix: Guard against network observer failing to register due to exception.</li> <li>Fix: Fix divide by zero error in MovieDrawable. Thanks @R12rus.</li> <li>Fix: Support nested Android asset files. Thanks @JaCzekanski.</li> <li>Fix: Guard against running out of file descriptors on Android O and O_MR1.</li> <li>Fix: Don't crash when disabling memory cache. Thanks @hansenji.</li> <li>Fix: Ensure Target.cancel is always called from the main thread.</li> </ul> <ul> <li>Update Kotlin to 1.3.50.</li> <li>Update Kotlin Coroutines to 1.3.0.</li> <li>Update OkHttp to 3.12.4.</li> <li>Update Okio to 2.4.0.</li> <li>Update AndroidX dependencies to the latest stable versions:<ul> <li><code>androidx.appcompat:appcompat</code> -&gt; 1.1.0</li> <li><code>androidx.core:core-ktx</code> -&gt; 1.1.0</li> <li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.1.0</li> </ul> </li> <li>Replace <code>appcompat</code> with <code>appcompat-resources</code> as an optional <code>compileOnly</code> dependency. <code>appcompat-resources</code> is a much smaller artifact.</li> </ul>"},{"location":"changelog/#061-august-16-2019","title":"[0.6.1] - August 16, 2019","text":"<ul> <li>New: Add <code>transformations(List&lt;Transformation&gt;)</code> to RequestBuilder.</li> <li>Fix: Add the last modified date to the cache key for file uris.</li> <li>Fix: Ensure View dimensions are evaluated to at least 1px.</li> <li>Fix: Clear MovieDrawable's canvas between frames.</li> <li>Fix: Open assets correctly.</li> </ul>"},{"location":"changelog/#060-august-12-2019","title":"[0.6.0] - August 12, 2019","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin at colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"compose/","title":"Compose","text":"<p>To add support for Compose UI, import the extension library:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-compose:3.0.0-rc01\")\n</code></pre> <p>Then use the <code>AsyncImage</code> composable to load and display an image:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre> <p><code>model</code> can either be the <code>ImageRequest.data</code> value - or the <code>ImageRequest</code> itself. <code>contentDescription</code> sets the text used by accessibility services to describe what this image represents.</p> <p>Note</p> <p>If you use Compose on JVM/desktop you should import <code>org.jetbrains.kotlinx:kotlinx-coroutines-swing:&lt;coroutines-version&gt;</code>. Coil relies on <code>Dispatchers.Main.immediate</code> to resolve images from the memory cache synchronously and <code>kotlinx-coroutines-swing</code> provides support for that on JVM (non-Android) platforms.</p>"},{"location":"compose/#asyncimage","title":"AsyncImage","text":"<p><code>AsyncImage</code> is a composable that executes an image request asynchronously and renders the result. It supports the same arguments as the standard <code>Image</code> composable and additionally, it supports setting <code>placeholder</code>/<code>error</code>/<code>fallback</code> painters and <code>onLoading</code>/<code>onSuccess</code>/<code>onError</code> callbacks. Here's an example that loads an image with a circle crop, crossfade, and sets a placeholder:</p> <pre><code>AsyncImage(\n    model = ImageRequest.Builder(LocalContext.current)\n        .data(\"https://example.com/image.jpg\")\n        .crossfade(true)\n        .build(),\n    placeholder = painterResource(R.drawable.placeholder),\n    contentDescription = stringResource(R.string.description),\n    contentScale = ContentScale.Crop,\n    modifier = Modifier.clip(CircleShape),\n)\n</code></pre> <p>When to use this function:</p> <p>Prefer using <code>AsyncImage</code> in most cases. It correctly determines the size your image should be loaded at based on the constraints of the composable and the provided <code>ContentScale</code>.</p>"},{"location":"compose/#rememberasyncimagepainter","title":"rememberAsyncImagePainter","text":"<p>Internally, <code>AsyncImage</code> and <code>SubcomposeAsyncImage</code> use <code>rememberAsyncImagePainter</code> to load the <code>model</code>. If you need a <code>Painter</code> and not a composable, you can load the image using <code>rememberAsyncImagePainter</code>:</p> <pre><code>val painter = rememberAsyncImagePainter(\"https://example.com/image.jpg\")\n</code></pre> <p><code>rememberAsyncImagePainter</code> is more flexible than <code>AsyncImage</code> and <code>SubcomposeAsyncImage</code>, but has a couple drawbacks (see below).</p> <p>When to use this function:</p> <p>Useful if you need a <code>Painter</code> instead of a composable - or if you need to observe the <code>AsyncImagePainter.state</code> and draw a different composable based on it - or if you need to manually restart the image request using <code>AsyncImagePainter.restart</code>.</p> <p>The main drawback of this function is it does not detect the size your image is loaded at on screen and always loads the image with its original dimensions. You can pass a custom <code>SizeResolver</code> or use <code>ConstraintsSizeResolver</code> (which is what <code>AsyncImage</code> uses internally) to resolve this. Example:</p> <pre><code>val sizeResolver = rememberConstraintsSizeResolver()\nval painter = rememberAsyncImagePainter(\n    model = ImageRequest.Builder(LocalPlatformContext.current)\n        .data(\"https://www.example.com/image.jpg\")\n        .size(sizeResolver)\n        .build(),\n)\n\nImage(\n    painter = painter,\n    contentDescription = null,\n    modifier = Modifier.then(sizeResolver),\n)\n</code></pre> <p>Another drawback is <code>AsyncImagePainter.state</code> will always be <code>AsyncImagePainter.State.Empty</code> for the first composition when using <code>rememberAsyncImagePainter</code> - even if the image is present in the memory cache and it will be drawn in the first frame.</p>"},{"location":"compose/#subcomposeasyncimage","title":"SubcomposeAsyncImage","text":"<p><code>SubcomposeAsyncImage</code> is a variant of <code>AsyncImage</code> that uses subcomposition to provide a slot API for <code>AsyncImagePainter</code>'s states instead of using <code>Painter</code>s. Here's an example:</p> <pre><code>SubcomposeAsyncImage(\n    model = \"https://example.com/image.jpg\",\n    loading = {\n        CircularProgressIndicator()\n    },\n    contentDescription = stringResource(R.string.description),\n)\n</code></pre> <p>Additionally, you can have more complex logic using its <code>content</code> argument and <code>SubcomposeAsyncImageContent</code>, which renders the current state:</p> <pre><code>SubcomposeAsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = stringResource(R.string.description)\n) {\n    val state by painter.state.collectAsState()\n    if (state is AsyncImagePainter.State.Success) {\n        SubcomposeAsyncImageContent()\n    } else {\n        CircularProgressIndicator()\n    }\n}\n</code></pre> <p>Note</p> <p>Subcomposition is slower than regular composition so this composable may not be suitable for performance-critical parts of your UI (e.g. <code>LazyList</code>).</p> <p>When to use this function:</p> <p>Generally prefer using <code>rememberAsyncImagePainter</code> instead of this function if you need to observe <code>AsyncImagePainter.state</code> as it does not use subcomposition.</p> <p>Specifically, this function is only useful if you need to observe <code>AsyncImagePainter.state</code> and you can't have it be <code>Loading</code> for the first composition and first frame like with <code>rememberAsyncImagePainter</code>. <code>SubcomposeAsyncImage</code> uses subcomposition to get the image's constraints so it's <code>AsyncImagePainter.state</code> is up to date immediately.</p>"},{"location":"compose/#observing-asyncimagepainterstate","title":"Observing AsyncImagePainter.state","text":"<p>Example:</p> <pre><code>val painter = rememberAsyncImagePainter(\"https://www.example.com/image.jpg\")\n\nwhen (painter.state) {\n    is AsyncImagePainter.State.Empty,\n    is AsyncImagePainter.State.Loading -&gt; {\n        CircularProgressIndicator()\n    }\n    is AsyncImagePainter.State.Success -&gt; {\n        Image(\n            painter = painter,\n            contentDescription = stringResource(R.string.description)\n        )\n    }\n    is AsyncImagePainter.State.Error -&gt; {\n        // Show some error UI.\n    }\n}\n</code></pre>"},{"location":"compose/#transitions","title":"Transitions","text":"<p>You can enable the built in crossfade transition using <code>ImageRequest.Builder.crossfade</code>:</p> <pre><code>AsyncImage(\n    model = ImageRequest.Builder(LocalContext.current)\n        .data(\"https://example.com/image.jpg\")\n        .crossfade(true)\n        .build(),\n    contentDescription = null,\n)\n</code></pre> <p>Custom <code>Transition</code>s do not work with <code>AsyncImage</code>, <code>SubcomposeAsyncImage</code>, or <code>rememberAsyncImagePainter</code> as they require a <code>View</code> reference. <code>CrossfadeTransition</code> works due to special internal support.</p> <p>That said, it's possible to create custom transitions in Compose by observing <code>AsyncImagePainter.state</code>:</p> <pre><code>val painter = rememberAsyncImagePainter(\"https://example.com/image.jpg\")\n\nval state by painter.state.collectAsState()\nif (state is AsyncImagePainter.State.Success &amp;&amp; state.result.dataSource != DataSource.MEMORY_CACHE) {\n    // Perform the transition animation.\n}\n\nImage(\n    painter = painter,\n    contentDescription = stringResource(R.string.description),\n)\n</code></pre>"},{"location":"compose/#previews","title":"Previews","text":"<p>The Android Studio preview behaviour for <code>AsyncImage</code>/<code>rememberAsyncImagePainter</code>/<code>SubcomposeAsyncImage</code> is controlled by the <code>LocalAsyncImagePreviewHandler</code>. By default, it will attempt to perform the request as normal inside the preview environment. Network access is disabled in the preview environment so network URLs will always fail.</p> <p>You can override the preview behaviour like so:</p> <pre><code>val previewHandler = AsyncImagePreviewHandler {\n    FakeImage(color = 0xFFFF0000) // Available in `io.coil-kt.coil3:coil-test`.\n}\n\nCompositionLocalProvider(LocalAsyncImagePreviewHandler provides previewHandler) {\n    AsyncImage(\n        model = \"https://www.example.com/image.jpg\",\n        contentDescription = null,\n    )\n}\n</code></pre> <p>This is also useful for AndroidX's Compose Preview Screenshot Testing library, which executes in the same preview environment.</p>"},{"location":"compose/#compose-multiplatform-resources","title":"Compose Multiplatform Resources","text":"<p>Coil supports loading Compose Multiplatform Resources by using <code>Res.getUri</code> as the <code>model</code> parameter. Example:</p> <pre><code>AsyncImage(\n    model = Res.getUri(\"drawable/sample.jpg\"),\n    contentDescription = null,\n)\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements.</p> <p>Issues that are tagged as help wanted are great issues to get started contributing to Coil.</p> <p>If you have a new feature idea, please create an enhancement request so it can be discussed or build it in an external library.</p> <p>If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it.</p> <p>If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request.</p> <p>When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running <code>./test.sh</code>.</p> <p>If you are making an API change, run <code>./gradlew apiDump</code> and include any changed files in your pull request.</p> <p>Modified from OkHttp's Contributing section.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil or search Github discussions.</p>"},{"location":"faq/#can-coil-be-used-with-java-projects-or-mixed-kotlinjava-projects","title":"Can Coil be used with Java projects or mixed Kotlin/Java projects?","text":"<p>Yes! Read here.</p>"},{"location":"faq/#how-do-i-preload-an-image","title":"How do I preload an image?","text":"<p>Read here.</p>"},{"location":"faq/#how-do-i-enable-logging","title":"How do I enable logging?","text":"<p>Set <code>logger(DebugLogger())</code> when constructing your <code>ImageLoader</code>.</p> <p>Note</p> <p><code>DebugLogger</code> should only be used in debug builds.</p>"},{"location":"faq/#how-do-i-target-java-8","title":"How do I target Java 8?","text":"<p>Coil requires Java 8 bytecode. This is enabled by default on the Android Gradle Plugin <code>4.2.0</code> and later and the Kotlin Gradle Plugin <code>1.5.0</code> and later. If you're using older versions of those plugins add the following to your Gradle build script:</p> <p>Gradle (<code>.gradle</code>):</p> <pre><code>android {\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n}\n</code></pre> <p>Gradle Kotlin DSL (<code>.gradle.kts</code>):</p> <pre><code>android {\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n}\n</code></pre>"},{"location":"faq/#how-do-i-get-development-snapshots","title":"How do I get development snapshots?","text":"<p>Add the snapshots repository to your list of repositories:</p> <p>Gradle (<code>.gradle</code>):</p> <pre><code>allprojects {\n    repositories {\n        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n    }\n}\n</code></pre> <p>Gradle Kotlin DSL (<code>.gradle.kts</code>):</p> <pre><code>allprojects {\n    repositories {\n        maven(\"https://oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Then depend on the same artifacts with the latest snapshot version.</p> <p>Note</p> <p>Snapshots are deployed for each new commit on <code>main</code> that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#compose-ui","title":"Compose UI","text":"<p>A typical Compose UI project will want to import:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-compose:3.0.0-rc01\")\nimplementation(\"io.coil-kt.coil3:coil-network-okhttp:3.0.0-rc01\")\n</code></pre> <p>Note</p> <p>If you use Compose Multiplatform, you'll need to use Ktor to download network images. See here for how to do that.</p> <p>After that's imported you can load images from the network using <code>AsyncImage</code>:</p> <pre><code>AsyncImage(\n    model = \"https://www.example.com/image.jpg\",\n    contentDescription = null,\n)\n</code></pre>"},{"location":"getting_started/#android-views","title":"Android Views","text":"<p>If you use Android Views instead of Compose UI import:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil:3.0.0-rc01\")\nimplementation(\"io.coil-kt.coil3:coil-network-okhttp:3.0.0-rc01\")\n</code></pre> <p>After that's imported you can load images from the network using the <code>ImageView.load</code> extension function:</p> <pre><code>imageView.load(\"https://www.example.com/image.jpg\") {\n    crossfade(true)\n}\n</code></pre>"},{"location":"getting_started/#configuring-the-singleton-imageloader","title":"Configuring the singleton ImageLoader","text":"<p>By default, Coil includes a singleton <code>ImageLoader</code>. The <code>ImageLoader</code> executes incoming <code>ImageRequest</code>s by fetching, decoding, caching, and returning the result. You don't need to configure your <code>ImageLoader</code>; if you don't Coil will create the singleton <code>ImageLoader</code> with the default configuration.</p> <p>You can configure it a number of ways (choose only one):</p> <ul> <li>Call <code>setSingletonImageLoaderFactory</code> near the entrypoint to your app (the root <code>@Composable</code> of your app). This works best for Compose Multiplatform apps.</li> </ul> <pre><code>setSingletonImageLoaderFactory { context -&gt;\n    ImageLoader.Builder(context)\n        .crossfade(true)\n        .build()\n}\n</code></pre> <ul> <li>Implement <code>SingletonImageLoader.Factory</code> on your <code>Application</code> in Android. This works best for Android apps.</li> </ul> <pre><code>class CustomApplication : Application(), SingletonImageLoader.Factory {\n    override fun newImageLoader(context: Context): ImageLoader {\n        return ImageLoader.Builder(context)\n            .crossfade(true)\n            .build()\n    }\n}\n</code></pre> <ul> <li>Call <code>SingletonImageLoader.setSafe</code> near the entrypoint to your app (e.g. in <code>Application.onCreate</code> on Android). This is the most flexible.</li> </ul> <pre><code>SingletonImageLoader.setSafe { context -&gt;\n    ImageLoader.Builder(context)\n        .crossfade(true)\n        .build()\n}\n</code></pre>"},{"location":"getting_started/#artifacts","title":"Artifacts","text":"<p>Here's a list of the main artifacts Coil has published to <code>mavenCentral()</code>:</p> <ul> <li><code>io.coil-kt.coil3:coil</code>: The default artifact which depends on <code>io.coil-kt.coil3:coil-core</code>. It includes a singleton <code>ImageLoader</code> and related extension functions.</li> <li><code>io.coil-kt.coil3:coil-core</code>: A subset of <code>io.coil-kt.coil3:coil</code> which does not include the singleton <code>ImageLoader</code> and related extension functions.</li> <li><code>io.coil-kt.coil3:coil-compose</code>: The default Compose UI artifact which depends on <code>io.coil-kt.coil3:coil</code> and <code>io.coil-kt.coil3:coil-compose-core</code>. It includes overloads for <code>AsyncImage</code>, <code>rememberAsyncImagePainter</code>, and <code>SubcomposeAsyncImage</code> that use the singleton <code>ImageLoader</code>.</li> <li><code>io.coil-kt.coil3:coil-compose-core</code>: A subset of <code>io.coil-kt.coil3:coil-compose</code> which does not include functions that depend on the singleton <code>ImageLoader</code>.</li> <li><code>io.coil-kt.coil3:coil-network-okhttp</code>: Includes support for fetching images from the network using OkHttp.</li> <li><code>io.coil-kt.coil3:coil-network-ktor2</code>: Includes support for fetching images from the network using Ktor 2.</li> <li><code>io.coil-kt.coil3:coil-network-ktor3</code>: Includes support for fetching images from the network using Ktor 3.</li> <li><code>io.coil-kt.coil3:coil-network-cache-control</code>: Includes support for respecting <code>Cache-Control</code> headers when fetching images from the network.</li> <li><code>io.coil-kt.coil3:coil-gif</code>: Includes two decoders to support decoding GIFs. See GIFs for more details.</li> <li><code>io.coil-kt.coil3:coil-svg</code>: Includes a decoder to support decoding SVGs. See SVGs for more details.</li> <li><code>io.coil-kt.coil3:coil-video</code>: Includes a decoder to support decoding frames from any of Android's supported video formats. See videos for more details.</li> <li><code>io.coil-kt.coil3:coil-test</code>: Includes classes to support testing. See testing for more details.</li> <li><code>io.coil-kt.coil3:coil-bom</code>: Includes a bill of materials. Importing <code>coil-bom</code> allows you to depend on other Coil artifacts without specifying a version.</li> </ul>"},{"location":"gifs/","title":"Gifs","text":"<p>This feature is only available on Android.</p> <p>Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them.</p> <p>To add GIF support, import the extension library:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-gif:3.0.0-rc01\")\n</code></pre> <p>And that's it! The <code>ImageLoader</code> will automatically detect any GIFs using their file headers and decode them correctly.</p> <p>Optionally, you can manually add the decoder to your component registry when constructing your <code>ImageLoader</code>:</p> <pre><code>val imageLoader = ImageLoader.Builder(context)\n    .components {\n        if (SDK_INT &gt;= 28) {\n            add(ImageDecoderDecoder.Factory())\n        } else {\n            add(GifDecoder.Factory())\n        }\n    }\n    .build()\n</code></pre> <p>To transform the pixel data of each frame of a GIF, see AnimatedTransformation.</p> <p>Note</p> <p>Coil includes two separate decoders to support decoding GIFs. <code>GifDecoder</code> supports all API levels, but is slower. <code>ImageDecoderDecoder</code> is powered by Android's ImageDecoder API which is only available on API 28 and above. <code>ImageDecoderDecoder</code> is faster than <code>GifDecoder</code> and supports decoding animated WebP images and animated HEIF image sequences.</p>"},{"location":"image_loaders/","title":"Image Loaders","text":"<p><code>ImageLoader</code>s are service objects that execute <code>ImageRequest</code>s. They handle caching, data fetching, image decoding, request management, memory management, and more.</p> <p>Coil performs best when you create a single <code>ImageLoader</code> and share it throughout your app. This is because each <code>ImageLoader</code> has its own memory cache, disk cache, and <code>OkHttpClient</code>.</p>"},{"location":"image_loaders/#singleton","title":"Singleton","text":"<p>The default <code>io.coil-kt.coil3:coil</code> artifact comes with a singleton <code>ImageLoader</code>. Coil creates this <code>ImageLoader</code> lazily. It can be configured a number of ways:</p> <pre><code>// The setSafe method ensures that it won't overwrite an\n// existing image loader that's been created.\nSingletonImageLoader.setSafe {\n    ImageLoader.Builder(context)\n        .crossfade(true)\n        .build()\n}\n\n// An alias of SingletonImageLoader.setSafe that's useful for\n// Compose Multiplatform apps.\nsetSingletonImageLoaderFactory { context -&gt;\n    ImageLoader.Builder(context)\n        .crossfade(true)\n        .build()\n}\n\n// Should only be used in tests. If you call this method\n// multiple times it will create multiple image loaders.\nSingletonImageLoader.setUnsafe {\n    ImageLoader.Builder(context)\n        .crossfade(true)\n        .build()\n}\n\n// On Android you can implement SingletonImageLoader.Factory on your\n// Application class to have it create the singleton image loader.\nclass CustomApplication : SingletonImageLoader.Factory {\n    override fun newImageLoader(context: Context): ImageLoader {\n        return ImageLoader.Builder(context)\n            .crossfade(true)\n            .build()\n    }\n}\n</code></pre> <p>In all cases ensure the above methods should be invoked as soon as possible when your app starts (i.e. inside <code>Application.onCreate</code> or inside <code>MainActivity.onCreate</code> if your app is only a single <code>Activity</code>.)</p>"},{"location":"image_loaders/#dependency-injection","title":"Dependency injection","text":"<p>If you have a larger app or want to manage your own <code>ImageLoaders</code> you can depend on <code>io.coil-kt.coil3:coil-core</code> instead of <code>io.coil-kt.coil3:coil</code>.</p> <p>This route makes scoping the lifecycle of a fake <code>ImageLoader</code> much easier and will overall make testing easier.</p>"},{"location":"image_loaders/#caching","title":"Caching","text":"<p>Each <code>ImageLoader</code> keeps a memory cache of recently decoded <code>Bitmap</code>s as well as a disk cache for any images loaded from the Internet. Both can be configured when creating an <code>ImageLoader</code>:</p> <pre><code>val imageLoader = ImageLoader.Builder(context)\n    .memoryCache {\n        MemoryCache.Builder(context)\n            .maxSizePercent(0.25)\n            .build()\n    }\n    .diskCache {\n        DiskCache.Builder()\n            .directory(context.cacheDir.resolve(\"image_cache\"))\n            .maxSizePercent(0.02)\n            .build()\n    }\n    .build()\n</code></pre> <p>You can access items in the memory and disk caches using their keys, which are returned in an <code>ImageResult</code> after an image is loaded. The <code>ImageResult</code> is returned by <code>ImageLoader.execute</code> or in <code>ImageRequest.Listener.onSuccess</code> and <code>ImageRequest.Listener.onError</code>.</p>"},{"location":"image_pipeline/","title":"Extending the Image Pipeline","text":"<p>Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, MP4, etc.)</p> <p>Fortunately, ImageLoaders support pluggable components to add new cache layers, new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of five main parts that are executed in the following order: Interceptors, Mappers, Keyers, Fetchers, and Decoders.</p> <p>Custom components must be added to the <code>ImageLoader</code> when constructing it through its ComponentRegistry:</p> <pre><code>val imageLoader = ImageLoader.Builder(context)\n    .components {\n        add(CustomCacheInterceptor())\n        add(ItemMapper())\n        add(HttpUrlKeyer())\n        add(CronetFetcher.Factory())\n        add(GifDecoder.Factory())\n    }\n    .build()\n</code></pre>"},{"location":"image_pipeline/#interceptors","title":"Interceptors","text":"<p>Interceptors allow you to observe, transform, short circuit, or retry requests to an <code>ImageLoader</code>'s image engine. For example, you can add a custom cache layer like so:</p> <pre><code>class CustomCacheInterceptor(\n    private val context: Context,\n    private val cache: LruCache&lt;String, Image&gt;,\n) : Interceptor {\n\n    override suspend fun intercept(chain: Interceptor.Chain): ImageResult {\n        val value = cache.get(chain.request.data.toString())\n        if (value != null) {\n            return SuccessResult(\n                image = value.bitmap.toImage(),\n                request = chain.request,\n                dataSource = DataSource.MEMORY_CACHE,\n            )\n        }\n        return chain.proceed(chain.request)\n    }\n}\n</code></pre> <p>Interceptors are an advanced feature that let you wrap an <code>ImageLoader</code>'s image pipeline with custom logic. Their design is heavily based on OkHttp's <code>Interceptor</code> interface.</p> <p>See Interceptor for more information.</p>"},{"location":"image_pipeline/#mappers","title":"Mappers","text":"<p>Mappers allow you to add support for custom data types. For instance, say we get this model from our server:</p> <pre><code>data class Item(\n    val id: Int,\n    val imageUrl: String,\n    val price: Int,\n    val weight: Double\n)\n</code></pre> <p>We could write a custom mapper to map it to its URL, which will be handled later in the pipeline:</p> <pre><code>class ItemMapper : Mapper&lt;Item, String&gt; {\n    override fun map(data: Item, options: Options) = data.imageUrl\n}\n</code></pre> <p>After registering it when building our <code>ImageLoader</code> (see above), we can safely load an <code>Item</code>:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(item)\n    .target(imageView)\n    .build()\nimageLoader.enqueue(request)\n</code></pre> <p>See Mapper for more information.</p>"},{"location":"image_pipeline/#keyers","title":"Keyers","text":"<p>Keyers convert data into a portion of a cache key. This value is used as <code>MemoryCache.Key.key</code> when/if this request's output is written to the <code>MemoryCache</code>.</p> <p>See Keyers for more information.</p>"},{"location":"image_pipeline/#fetchers","title":"Fetchers","text":"<p>Fetchers translate data (e.g. URL, URI, File, etc.) into either an <code>ImageSource</code> or an <code>Image</code>. They typically convert the input data into a format that can then be consumed by a <code>Decoder</code>. Use this interface to add support for custom fetching mechanisms (e.g. Cronet, custom URI schemes, etc.)</p> <p>See Fetcher for more information.</p> <p>Note</p> <p>If you add a <code>Fetcher</code> that uses a custom data type, you need to also need to provide a custom <code>Keyer</code> to ensure results from requests that use it are memory cacheable. For example, <code>Fetcher.Factory&lt;MyDataType&gt;</code> will need to add a <code>Keyer&lt;MyDataType</code>.</p>"},{"location":"image_pipeline/#decoders","title":"Decoders","text":"<p>Decoders read an <code>ImageSource</code> and return an <code>Image</code>. Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.).</p> <p>See Decoder for more information.</p>"},{"location":"image_requests/","title":"Image Requests","text":"<p><code>ImageRequest</code>s are value objects that provide all the necessary information for an ImageLoader to load an image. <code>ImageRequest</code>s can be created using a builder:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .crossfade(true)\n    .target(imageView)\n    .build()\n</code></pre> <p>Once you've created a request pass it to an <code>ImageLoader</code> to enqueue/execute it:</p> <pre><code>imageLoader.enqueue(request)\n</code></pre> <p>See the API documentation for more information.</p>"},{"location":"java_compatibility/","title":"Java Compatibility","text":"<p>Coil's API is designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java.</p> <p>Importantly, suspend functions cannot be implemented in Java. This means custom Transformations, Size Resolvers, Fetchers, and Decoders must be implemented in Kotlin.</p> <p>Despite these limitations, most of Coil's API is Java compatible. You can get the singleton <code>ImageLoader</code> using:</p> <pre><code>ImageLoader imageLoader = SingletonImageLoader.get(context);\n</code></pre> <p>The syntax to enqueue an <code>ImageRequest</code> is almost the same in Java and Kotlin:</p> <pre><code>ImageRequest request = new ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .crossfade(true)\n    .target(imageView)\n    .build();\nimageLoader.enqueue(request);\n</code></pre> <p>Note</p> <p><code>ImageView.load</code> cannot be used from Java. Use the <code>ImageRequest.Builder</code> API instead.</p> <p><code>suspend</code> functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to use the <code>ImageLoader.executeBlocking</code> extension function which can be called from Java like so:</p> <pre><code>ImageRequest request = new ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .size(1080, 1920)\n    .build();\nDrawable drawable = ImageLoaders.executeBlocking(imageLoader, request).getImage().asDrawable(context.resources);\n</code></pre> <p>Note</p> <p><code>ImageLoaders.executeBlocking</code> will block the current thread instead of suspending. Do not call this from the main thread.</p>"},{"location":"migrating/","title":"Migrating from Glide/Picasso","text":"<p>Here are a few examples of how to migrate Glide/Picasso calls into Coil calls:</p>"},{"location":"migrating/#basic-usage","title":"Basic Usage","text":"<pre><code>// Glide\nGlide.with(context)\n    .load(url)\n    .into(imageView)\n\n// Picasso\nPicasso.get()\n    .load(url)\n    .into(imageView)\n\n// Coil\nimageView.load(url)\n</code></pre>"},{"location":"migrating/#custom-requests","title":"Custom Requests","text":"<pre><code>imageView.scaleType = ImageView.ScaleType.FIT_CENTER\n\n// Glide\nGlide.with(context)\n    .load(url)\n    .placeholder(placeholder)\n    .fitCenter()\n    .into(imageView)\n\n// Picasso\nPicasso.get()\n    .load(url)\n    .placeholder(placeholder)\n    .fit()\n    .into(imageView)\n\n// Coil (automatically detects the scale type)\nimageView.load(url) {\n    placeholder(placeholder)\n}\n</code></pre>"},{"location":"migrating/#non-view-targets","title":"Non-View Targets","text":"<pre><code>// Glide (has optional callbacks for start and error)\nGlide.with(context)\n    .load(url)\n    .into(object : CustomTarget&lt;Drawable&gt;() {\n        override fun onResourceReady(resource: Drawable, transition: Transition&lt;Drawable&gt;) {\n            // Handle the successful result.\n        }\n\n        override fun onLoadCleared(placeholder: Drawable) {\n            // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain.\n        }\n    })\n\n// Picasso\nPicasso.get()\n    .load(url)\n    .into(object : BitmapTarget {\n        override fun onBitmapLoaded(bitmap: Bitmap, from: Picasso.LoadedFrom) {\n            // Handle the successful result.\n        }\n\n        override fun onBitmapFailed(e: Exception, errorDrawable: Drawable?) {\n            // Handle the error drawable.\n        }\n\n        override fun onPrepareLoad(placeHolderDrawable: Drawable?) {\n            // Handle the placeholder drawable.\n        }\n    })\n\n// Coil\nval request = ImageRequest.Builder(context)\n    .data(url)\n    .target(\n        onStart = { placeholder -&gt;\n            // Handle the placeholder drawable.\n        },\n        onSuccess = { result -&gt;\n            // Handle the successful result.\n        },\n        onError = { error -&gt;\n            // Handle the error drawable.\n        }\n    )\n    .build()\ncontext.imageLoader.enqueue(request)\n</code></pre>"},{"location":"migrating/#background-thread","title":"Background Thread","text":"<pre><code>// Glide (blocks the current thread; must not be called from the main thread)\nval drawable = Glide.with(context)\n    .load(url)\n    .submit(width, height)\n    .get()\n\n// Picasso (blocks the current thread; must not be called from the main thread)\nval drawable = Picasso.get()\n    .load(url)\n    .resize(width, height)\n    .get()\n\n// Coil (suspends, non-blocking, and thread safe)\nval request = ImageRequest.Builder(context)\n    .data(url)\n    .size(width, height)\n    .build()\nval drawable = context.imageLoader.execute(request).drawable\n</code></pre>"},{"location":"network/","title":"Network Images","text":"<p>By default, Coil 3.x does not include support for loading images from the network. This is to avoid forcing a large networking dependency on users who want to use their own networking solution or do not need network URL support (e.g. only loading images from disk).</p> <p>To add support for fetching images from the network import only one of the following:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-network-okhttp:3.0.0-rc01\") // Only available on Android/JVM.\nimplementation(\"io.coil-kt.coil3:coil-network-ktor2:3.0.0-rc01\")\nimplementation(\"io.coil-kt.coil3:coil-network-ktor3:3.0.0-rc01\")\n</code></pre> <p>If you use OkHttp, that's it. Once imported, network URLs like <code>https://www.example.com/image.jpg</code> will automatically be supported. If you use Ktor, you need to add supported engines for each platform:</p>"},{"location":"network/#ktor-network-engines","title":"Ktor network engines","text":"<p>If you depend on <code>coil-network-ktor2</code> or <code>coil-network-ktor3</code> you need to import a Ktor engine for each platform (except Javascript). Here's a quickstart set of engines:</p> <pre><code>androidMain {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-android:&lt;ktor-version&gt;\")\n    }\n}\nappleMain {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-darwin:&lt;ktor-version&gt;\")\n    }\n}\njvmMain {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-java:&lt;ktor-version&gt;\")\n    }\n}\n</code></pre> <p>If you want to use a custom networking library, you can import <code>io.coil-kt.coil3:coil-network-core</code>, implement <code>NetworkClient</code>, and register <code>NetworkFetcher</code> with your custom <code>NetworkClient</code> in your <code>ImageLoader</code>.</p>"},{"location":"network/#cache-control-support","title":"Cache-Control support","text":"<p>By default, Coil 3.x does not respect <code>Cache-Control</code> headers and always saves a response to its disk cache.</p> <p><code>io.coil-kt.coil3:coil-network-cache-control</code> includes a <code>CacheStrategy</code> implementation that ensures that <code>NetworkFetcher</code> respects a network response's <code>Cache-Control</code> header.</p> <p>Pass <code>CacheControlCacheStrategy</code> to your <code>NetworkFetcher</code> then register the custom <code>NetworkFetcher</code> in your <code>ImageLoader</code>:</p> <pre><code>KtorNetworkFetcher(\n    cacheStrategy = CacheControlCacheStrategy(),\n)\n</code></pre> <p>Note</p> <p>You need to enable <code>coreLibraryDesugaring</code> to support Android API level 25 or below. Follow the docs here to enable it.</p>"},{"location":"recipes/","title":"Recipes","text":"<p>This page provides guidance on how to handle some common use cases with Coil. You might have to modify this code to fit your exact requirements, but it should hopefully give you a push in the right direction!</p> <p>See a common use case that isn't covered? Feel free to submit a PR with a new section.</p>"},{"location":"recipes/#palette","title":"Palette","text":"<p>Palette allows you to extract prominent colors from an image. To create a <code>Palette</code>, you'll need access to an image's <code>Bitmap</code>. This can be done in a number of ways:</p> <p>You can get access to an image's bitmap by setting a <code>ImageRequest.Listener</code> and enqueuing an <code>ImageRequest</code>:</p> <pre><code>imageView.load(\"https://example.com/image.jpg\") {\n    // Disable hardware bitmaps as Palette needs to read the image's pixels.\n    allowHardware(false)\n    listener(\n        onSuccess = { _, result -&gt;\n            // Create the palette on a background thread.\n            Palette.Builder(result.drawable.toBitmap()).generate { palette -&gt;\n                // Consume the palette.\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"recipes/#using-a-custom-okhttpclient","title":"Using a custom OkHttpClient","text":"<p>If you use <code>io.coil-kt.coil3:coil-network-okhttp</code> You can specify a custom <code>OkHttpClient</code> when creating your <code>ImageLoader</code>:</p> <pre><code>val imageLoader = ImageLoader.Builder(context)\n    // Create the OkHttpClient inside a lambda so it will be initialized lazily on a background thread.\n    .components {\n        add(\n            OkHttpNetworkFetcherFactory(\n                callFactory = {\n                    OkHttpClient.Builder()\n                        .addInterceptor(CustomInterceptor())\n                        .build()\n                }\n            )\n        )\n    }\n    .build()\n</code></pre> <p>Note</p> <p>If you already have a built <code>OkHttpClient</code>, use <code>newBuilder()</code> to build a new client that shares resources with the original.</p>"},{"location":"recipes/#headers","title":"Headers","text":"<p>Headers can be added to your image requests in one of two ways. You can set headers for a single request:</p> <pre><code>val headers = NetworkHeaders.Builder()\n    .set(\"Cache-Control\", \"no-cache\")\n    .build()\nval request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .httpHeaders(headers)\n    .target(imageView)\n    .build()\nimageLoader.execute(request)\n</code></pre> <p>Or you can create an OkHttp <code>Interceptor</code> that sets headers for every request executed by your <code>ImageLoader</code>:</p> <pre><code>class RequestHeaderInterceptor(\n    private val name: String,\n    private val value: String,\n) : Interceptor {\n\n    override fun intercept(chain: Interceptor.Chain): Response {\n        val headers = NetworkHeaders.Builder()\n            .set(\"Cache-Control\", \"no-cache\")\n            .build()\n        val request = chain.request().newBuilder()\n            .httpHeaders(headers)\n            .build()\n        return chain.proceed(request)\n    }\n}\n\nval imageLoader = ImageLoader.Builder(context)\n    .okHttpClient {\n        OkHttpClient.Builder()\n            // This header will be added to every image request.\n            .addNetworkInterceptor(RequestHeaderInterceptor(\"Cache-Control\", \"no-cache\"))\n            .build()\n    }\n    .build()\n</code></pre>"},{"location":"recipes/#using-a-memory-cache-key-as-a-placeholder","title":"Using a Memory Cache Key as a Placeholder","text":"<p>Using a previous request's <code>MemoryCache.Key</code> as a placeholder for a subsequent request can be useful if the two images are the same, though loaded at different sizes. For instance, if the first request loads the image at 100x100 and the second request loads the image at 500x500, we can use the first image as a synchronous placeholder for the second request.</p> <p>Here's what this effect looks like in the sample app:</p> <p> </p> <p>Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect.</p> <p>To achieve this effect, use the <code>MemoryCache.Key</code> of the first request as the <code>ImageRequest.placeholderMemoryCacheKey</code> of the second request. Here's an example:</p> <pre><code>// First request\nlistImageView.load(\"https://example.com/image.jpg\")\n\n// Second request (once the first request finishes)\ndetailImageView.load(\"https://example.com/image.jpg\") {\n    placeholderMemoryCacheKey(listImageView.result.memoryCacheKey)\n}\n</code></pre>"},{"location":"recipes/#shared-element-transitions","title":"Shared Element Transitions","text":"<p>Shared element transitions allow you to animate between <code>Activities</code> and <code>Fragments</code>. Here are some recommendations on how to get them to work with Coil:</p> <ul> <li> <p>Shared element transitions are incompatible with hardware bitmaps. You should set <code>allowHardware(false)</code> to disable hardware bitmaps for both the <code>ImageView</code> you are animating from and the view you are animating to. If you don't, the transition will throw an <code>java.lang.IllegalArgumentException: Software rendering doesn't support hardware bitmaps</code> exception.</p> </li> <li> <p>Use the <code>MemoryCache.Key</code> of the start image as the <code>placeholderMemoryCacheKey</code> for the end image. This ensures that the start image is used as the placeholder for the end image, which results in a smooth transition with no white flashes if the image is in the memory cache.</p> </li> <li> <p>Use <code>ChangeImageTransform</code> and <code>ChangeBounds</code> together for optimal results.</p> </li> </ul> <p>Using Compose? Check out this article for how to perform shared element transitions with <code>AsyncImage</code>.</p>"},{"location":"recipes/#remote-views","title":"Remote Views","text":"<p>Coil does not provide a <code>Target</code> for <code>RemoteViews</code> out of the box, however you can create one like so:</p> <pre><code>class RemoteViewsTarget(\n    private val context: Context,\n    private val componentName: ComponentName,\n    private val remoteViews: RemoteViews,\n    @IdRes private val imageViewResId: Int\n) : Target {\n\n    override fun onStart(placeholder: Image?) = setDrawable(placeholder)\n\n    override fun onError(error: Image?) = setDrawable(error)\n\n    override fun onSuccess(result: Image) = setDrawable(result)\n\n    private fun setDrawable(image: Image?) {\n        remoteViews.setImageViewBitmap(imageViewResId, image?.toBitmap())\n        AppWidgetManager.getInstance(context).updateAppWidget(componentName, remoteViews)\n    }\n}\n</code></pre> <p>Then <code>enqueue</code>/<code>execute</code> the request like normal:</p> <pre><code>val request = ImageRequest.Builder(context)\n    .data(\"https://example.com/image.jpg\")\n    .target(RemoteViewsTarget(context, componentName, remoteViews, imageViewResId))\n    .build()\nimageLoader.enqueue(request)\n</code></pre>"},{"location":"recipes/#transforming-painters","title":"Transforming Painters","text":"<p>Both <code>AsyncImage</code> and <code>AsyncImagePainter</code> have <code>placeholder</code>/<code>error</code>/<code>fallback</code> arguments that accept <code>Painter</code>s. Painters are less flexible than using composables, but are faster as Coil doesn't need to use subcomposition. That said, it may be necessary to inset, stretch, tint, or transform your painter to get the desired UI. To accomplish this, copy this Gist into your project and wrap the painter like so:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n    placeholder = forwardingPainter(\n        painter = painterResource(R.drawable.placeholder),\n        colorFilter = ColorFilter(Color.Red),\n        alpha = 0.5f,\n    ),\n)\n</code></pre> <p>The <code>onDraw</code> can be overwritten using a trailing lambda:</p> <pre><code>AsyncImage(\n    model = \"https://example.com/image.jpg\",\n    contentDescription = null,\n    placeholder = forwardingPainter(painterResource(R.drawable.placeholder)) { info -&gt;\n        inset(50f, 50f) {\n            with(info.painter) {\n                draw(size, info.alpha, info.colorFilter)\n            }\n        }\n    },\n)\n</code></pre>"},{"location":"svgs/","title":"SVGs","text":"<p>To add SVG support, import the extension library:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-svg:3.0.0-rc01\")\n</code></pre> <p>And that's it! The <code>ImageLoader</code> will automatically detect and decode any SVGs. Coil detects SVGs by looking for the <code>&lt;svg</code> marker in the first 1 KB of the file, which should cover most cases. If the SVG is not automatically detected, you can set the <code>Decoder</code> explicitly for the request:</p> <pre><code>imageView.load(\"/path/to/svg\") {\n    decoderFactory { result, options, _ -&gt; SvgDecoder(result.source, options) }\n}\n</code></pre> <p>Optionally, you can manually add the decoder to your component registry when constructing your <code>ImageLoader</code>:</p> <pre><code>val imageLoader = ImageLoader.Builder(context)\n    .components {\n        add(SvgDecoder.Factory())\n    }\n    .build()\n</code></pre>"},{"location":"testing/","title":"Testing","text":"<p>To use the testing support classes, import the extension library:</p> <pre><code>testImplementation(\"io.coil-kt.coil3:coil-test:3.0.0-rc01\")\n</code></pre> <p><code>coil-test</code> includes a <code>FakeImageLoaderEngine</code>, which can be added to your <code>ImageLoader</code> to intercept all incoming <code>ImageRequest</code>s and return a custom <code>ImageResult</code>. This is useful for testing as it makes loading images synchronous (from the main thread) and consistent. By using <code>FakeImageLoaderEngine</code> the <code>ImageLoader</code> will avoid all the memory caching, thread jumping, disk/network I/O fetching, and image decoding that's typically done to load an image. Here's an example:</p> <pre><code>val engine = FakeImageLoaderEngine.Builder()\n    .intercept(\"https://www.example.com/image.jpg\", ColorDrawable(Color.RED))\n    .intercept({ it is String &amp;&amp; it.endsWith(\"test.png\") }, ColorDrawable(Color.GREEN))\n    .default(ColorDrawable(Color.BLUE))\n    .build()\nval imageLoader = ImageLoader.Builder(context)\n    .components { add(engine) }\n    .build()\n</code></pre> <p>This strategy works great with Paparazzi to screenshot test UIs without a physical device or emulator:</p> <pre><code>class PaparazziTest {\n    @get:Rule\n    val paparazzi = Paparazzi()\n\n    @Before\n    fun before() {\n        val engine = FakeImageLoaderEngine.Builder()\n            .intercept(\"https://www.example.com/image.jpg\", ColorDrawable(Color.RED))\n            .intercept({ it is String &amp;&amp; it.endsWith(\"test.png\") }, ColorDrawable(Color.GREEN))\n            .default(ColorDrawable(Color.BLUE))\n            .build()\n        val imageLoader = ImageLoader.Builder(paparazzi.context)\n            .components { add(engine) }\n            .build()\n        SingletonImageLoader.setUnsafe(imageLoader)\n    }\n\n    @Test\n    fun testContentComposeRed() {\n        // Will display a red box.\n        paparazzi.snapshot {\n            AsyncImage(\n                model = \"https://www.example.com/image.jpg\",\n                contentDescription = null,\n            )\n        }\n    }\n\n    @Test\n    fun testContentComposeGreen() {\n        // Will display a green box.\n        paparazzi.snapshot {\n            AsyncImage(\n                model = \"https://www.example.com/test.png\",\n                contentDescription = null,\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"upgrading_to_coil2/","title":"Upgrading to Coil 2.x","text":"<p>This is a short guide to highlight the main changes when upgrading from Coil 1.x to 2.x and how to handle them. This upgrade guide doesn't cover every binary or source incompatible change, but it does cover the most important changes.</p>"},{"location":"upgrading_to_coil2/#minimum-api-21","title":"Minimum API 21","text":"<p>Coil 2.x requires minimum API 21. This is also the minimum API required for Compose and OkHttp 4.x.</p>"},{"location":"upgrading_to_coil2/#imagerequest-default-scale","title":"ImageRequest default scale","text":"<p>Coil 2.x changes <code>ImageRequest</code>'s default scale from <code>Scale.FILL</code> to <code>Scale.FIT</code>. This was done to be consistent with <code>ImageView</code>'s default <code>ScaleType</code> and <code>Image</code>'s default <code>ContentScale</code>. Scale is still autodetected if you set an <code>ImageView</code> as your <code>ImageRequest.target</code>.</p>"},{"location":"upgrading_to_coil2/#size-refactor","title":"Size refactor","text":"<p><code>Size</code>'s <code>width</code> and <code>height</code> are now two <code>Dimension</code>s instead of <code>Int</code> pixel values. <code>Dimension</code> is either a pixel value or <code>Dimension.Undefined</code>, which represents an undefined/unbounded constraint. For example, if the size is <code>Size(400, Dimension.Undefined)</code> that means the image should be scaled to have 400 pixels for its width irrespective of its height. You can use the <code>pxOrElse</code> extension to get the pixel value (if present), else use a fallback:</p> <pre><code>val width = size.width.pxOrElse { -1 }\nif (width &gt; 0) {\n    // Use the pixel value.\n}\n</code></pre> <p>This change was made to improve support for cases where a target has one unbounded dimension (e.g. if one dimension is <code>ViewGroup.LayoutParams.WRAP_CONTENT</code> for a <code>View</code> or <code>Constraints.Infinity</code> in Compose).</p>"},{"location":"upgrading_to_coil2/#compose","title":"Compose","text":"<p>Coil 2.x significantly reworks the Compose integration to add features, improve stability, and improve performance.</p> <p>In Coil 1.x you would use <code>rememberImagePainter</code> to load an image:</p> <pre><code>val painter = rememberImagePainter(\"https://example.com/image.jpg\") {\n    crossfade(true)\n}\n\nImage(\n    painter = painter,\n    contentDescription = null,\n    contentScale = ContentScale.Crop\n)\n</code></pre> <p>In Coil 2.x <code>rememberImagePainter</code> has been changed to <code>rememberAsyncImagePainter</code> with the following changes:</p> <ul> <li>The trailing lambda argument to configure the <code>ImageRequest</code> has been removed.</li> <li>In Coil 2.x, <code>rememberAsyncImagePainter</code> defaults to using <code>ContentScale.Fit</code> to be consistent with <code>Image</code> whereas in Coil 1.x it would default to <code>ContentScale.Crop</code>. As such, if you set a custom <code>ContentScale</code> on <code>Image</code>, you now also need to pass it to <code>rememberAsyncImagePainter</code>.</li> </ul> <pre><code>val painter = rememberAsyncImagePainter(\n    model = ImageRequest.Builder(LocalContext.current)\n        .data(\"https://example.com/image.jpg\")\n        .crossfade(true)\n        .build(),\n    contentScale = ContentScale.Crop\n)\n\nImage(\n    painter = painter,\n    contentDescription = null,\n    contentScale = ContentScale.Crop\n)\n</code></pre> <p>Additionally, Coil now has <code>AsyncImage</code> and <code>SubcomposeAsyncImage</code> composable functions, which add new features and work-around some design limitations of <code>rememberAsyncImagePainter</code>. Check out the full Compose docs here.</p>"},{"location":"upgrading_to_coil2/#disk-cache","title":"Disk Cache","text":"<p>Coil 2.x has its own public disk cache class that can be accessed using <code>imageLoader.diskCache</code>. Coil 1.x relied on OkHttp's disk cache, however it's no longer needed.</p> <p>To configure the disk cache in 1.x you would use <code>CoilUtils.createDefaultCache</code>:</p> <pre><code>ImageLoader.Builder(context)\n    .okHttpClient {\n        OkHttpClient.Builder().cache(CoilUtils.createDefaultCache(context)).build()\n    }\n    .build()\n</code></pre> <p>In Coil 2.x you should not set a <code>Cache</code> object on your <code>OkHttpClient</code> when used with an <code>ImageLoader</code>. Instead configure the disk cache object like so:</p> <pre><code>ImageLoader.Builder(context)\n    .diskCache {\n        DiskCache.Builder()\n            .directory(context.cacheDir.resolve(\"image_cache\"))\n            .build()\n    }\n    .build()\n</code></pre> <p>This change was made to add functionality and improve performance:</p> <ul> <li>Support thread interruption while decoding images.</li> <li>Thread interruption allows fast cancellation of decode operations. This is particularly important for quickly scrolling through a list.</li> <li>By using a custom disk cache Coil is able to ensure a network source is fully read to disk before decoding. This is necessary as writing the data to disk cannot be interrupted - only the decode step can be interrupted. OkHttp's <code>Cache</code> shouldn't be used with Coil 2.0 as it's not possible to guarantee that all data is written to disk before decoding.</li> <li>Avoid buffering/creating temporary files for decode APIs that don't support <code>InputStream</code>s or require direct access to a <code>File</code> (e.g. <code>ImageDecoder</code>, <code>MediaMetadataRetriever</code>).</li> <li>Add a public read/write <code>DiskCache</code> API.</li> </ul> <p>In Coil 2.x <code>Cache-Control</code> and other cache headers are still supported - except <code>Vary</code> headers, as the cache only checks that the URLs match. Additionally, only responses with a response code in the range [200..300) are cached.</p> <p>When upgrading from Coil 1.x to 2.x, any existing disk cache will be cleared as the internal format has changed.</p>"},{"location":"upgrading_to_coil2/#image-pipeline-refactor","title":"Image pipeline refactor","text":"<p>Coil 2.x refactors the image pipeline classes to be more flexible. Here's a high-level list of the changes:</p> <ul> <li>Introduce a new class, <code>Keyer</code>, that computes the memory cache key for a request. It replaces <code>Fetcher.key</code>.</li> <li><code>Mapper</code>, <code>Keyer</code>, <code>Fetcher</code>, and <code>Decoder</code> can return <code>null</code> to delegate to the next element in the list of components.</li> <li>Add <code>Options</code> to <code>Mapper.map</code>'s signature.</li> <li>Introduce <code>Fetcher.Factory</code> and <code>Decoder.Factory</code>. Use the factories to determine if a specific <code>Fetcher</code>/<code>Decoder</code> is applicable. Return <code>null</code> if that <code>Fetcher</code>/<code>Decoder</code> is not applicable.</li> </ul>"},{"location":"upgrading_to_coil2/#remove-bitmap-pooling","title":"Remove bitmap pooling","text":"<p>Coil 2.x removes bitmap pooling and its associated classes (<code>BitmapPool</code>, <code>PoolableViewTarget</code>). See here for why it was removed.</p>"},{"location":"upgrading_to_coil3/","title":"Upgrading to Coil 3.x","text":"<p>Note</p> <p>The doc is a work in progress and will be improved before the final Coil 3.0 release.</p> <p>Coil 3 is the next major version of Coil that has a number of major improvements:</p> <ul> <li>Full support for Compose Multiplatform. Coil supports all major targets (Android, iOS, JVM, JS, and WASM) and works with Compose Multiplatform Resources without issue.</li> <li>Support for multiple networking libraries (Ktor and OkHttp). Alternatively, Coil can be used without a network dependency if you only need to load local/static files.</li> <li>Significant improvements to the Compose integration. Faster runtime performance (benchmarks coming). Better support for <code>@Preview</code> rendering.</li> <li>Important fixes for bugs that required breaking existing behaviour.</li> </ul> <p>This document provides a high-level overview of the main changes from Coil 2 to Coil 3 and highlights any breaking or important changes. It does not cover every binary incompatible change or small behaviour changes.</p> <p>Using Coil 3 in a Compose Multiplatform project? Check out the <code>samples</code> repository for examples.</p>"},{"location":"upgrading_to_coil3/#maven-coordinates-and-package-name","title":"Maven Coordinates and Package Name","text":"<p>Coil's Maven coordinates were updated from <code>io.coil-kt</code> to <code>io.coil-kt.coil3</code> and its package name was updated from <code>coil</code> to <code>coil3</code>. This allows Coil 3 to run side by side with Coil 2 without binary compatibility issues. For example, <code>io.coil-kt:coil:2.7.0</code> is now <code>io.coil-kt.coil3:coil:3.0.0</code>.</p> <p>The <code>coil-base</code> and <code>coil-compose-base</code> artifacts were renamed to <code>coil-core</code> and <code>coil-compose-core</code> respectively to align with the naming conventions used by Coroutines, Ktor, and AndroidX.</p>"},{"location":"upgrading_to_coil3/#default-changes","title":"Default Changes","text":"<p>Coil 3.0 has several import default changes:</p> <ul> <li>Cache headers are no longer respected by default. See here for more info.</li> <li>A file's last write timestamp is no longer added to its cache key by default. This is to avoid reading the disk on the main thread (even for a very short amount of time). This can be renabled with <code>ImageRequest.Builder.addLastModifiedToFileCacheKey</code> or <code>ImageLoader.Builder.addLastModifiedToFileCacheKey</code>.</li> <li>Output image dimensions are now forced to be less than 4096x4096 to guard against accidental OOMs. This can be configured with <code>ImageLoader/ImageRequest.Builder.maxBitmapSize</code>.</li> </ul>"},{"location":"upgrading_to_coil3/#network-images","title":"Network Images","text":"<p><code>coil-core</code> no longer supports loading images from the network by default. You must add a dependency on one of Coil's network artifacts. See here for more info.. This was changed so consumers could use different networking libraries or avoid a network dependency if their app doesn't need it. </p>"},{"location":"upgrading_to_coil3/#multiplatform","title":"Multiplatform","text":"<p>Coil 3 is now a Kotlin Multiplatform library that supports Android, JVM, iOS, macOS, Javascript, and WASM.</p> <p>On Android, Coil uses the standard graphics classes to render images. On non-Android platforms, Coil uses Skiko to render images. Skiko is a set of Kotlin bindings that wrap the Skia graphics engine developed by Google.</p> <p>As part of decoupling from the Android SDK, a number of API changes were made. Notably:</p> <ul> <li><code>Drawable</code> was replaced with a custom <code>Image</code> interface. Use <code>Drawable.asImage()</code> and <code>Image.asDrawable()</code> to convert between the classes on Android. On non-Android platforms use <code>Bitmap.asImage()</code> and <code>Image.toBitmap()</code>. You can also write your own subclasses, though that's more advanced.</li> <li>Android's <code>android.net.Uri</code> class was replaced a multiplatform <code>coil3.Uri</code> class. Any instances of <code>android.net.Uri</code> that are used as <code>ImageRequest.data</code> will be mapped to <code>coil3.Uri</code> before being fetched/decoded.</li> <li>Usages of <code>Context</code> were replaced with <code>PlatformContext</code>. <code>PlatformContext</code> is a type alias for <code>Context</code> on Android and can be accessed using <code>PlatformContext.INSTANCE</code> on non-Android platforms. Use <code>LocalPlatformContext.current</code> to get a reference in Compose Multiplatform.</li> <li>The <code>Coil</code> class was renamed to <code>SingletonImageLoader</code>. </li> <li>If you're implementing <code>ImageLoaderFactory</code> in your custom Android <code>Application</code> class, you'll need to switch to implementing <code>SingletonImageLoader.Factory</code> as a replacement for <code>ImageLoaderFactory</code>. Once you implement <code>SingletonImageLoader.Factory</code>, you'll be able to override <code>newImageLoader()</code> if you need or want to override it.</li> </ul> <p>The <code>coil-svg</code> is supported in multiplatform, but the <code>coil-gif</code> and <code>coil-video</code> artifacts continue to be Android-only (for now) as they rely on specific Android decoders and libraries.</p>"},{"location":"upgrading_to_coil3/#compose","title":"Compose","text":"<p>The <code>coil-compose</code> artifact's APIs are mostly unchanged. You can continue using <code>AsyncImage</code>, <code>SubcomposeAsyncImage</code>, and <code>rememberAsyncImagePainter</code> the same way as with Coil 2.x. Additionally, this methods have been updated to be restartable and skippable which should improve their performance.</p> <p>Note</p> <p>If you use Coil on a JVM (non-Android) platform, you should add a dependency on a coroutines main dispatcher. On desktop you likely want to import <code>org.jetbrains.kotlinx:kotlinx-coroutines-swing</code>. If it's not imported then <code>ImageRequest</code>s won't be dispatched immediately and will have one frame of delay before setting the <code>ImageRequest.placeholder</code> or resolving from the memory cache.</p>"},{"location":"upgrading_to_coil3/#extras","title":"Extras","text":"<p>Coil 2's <code>Parameters</code> API was replaced by <code>Extras</code>. <code>Extras</code> don't require a string key and instead rely on identity equality. <code>Extras</code> don't support modifying the memory cache key. Instead, use <code>ImageRequest.memoryCacheKeyExtra</code> if your extra affects the memory cache key.</p>"},{"location":"videos/","title":"Video Frames","text":"<p>This feature is only available on Android.</p> <p>To add video frame support, import the extension library:</p> <pre><code>implementation(\"io.coil-kt.coil3:coil-video:3.0.0-rc01\")\n</code></pre> <p>And add the decoder to your component registry when constructing your <code>ImageLoader</code>:</p> <pre><code>val imageLoader = ImageLoader.Builder(context)\n    .components {\n        add(VideoFrameDecoder.Factory())\n    }\n    .build()\n</code></pre> <p>To specify the time of the frame to extract from a video, use <code>videoFrameMillis</code> or <code>videoFrameMicros</code>:</p> <pre><code>imageView.load(\"/path/to/video.mp4\") {\n    videoFrameMillis(1000)  // extracts the frame at 1 second of the video\n}\n</code></pre> <p>For specifying the exact frame number, use <code>videoFrameIndex</code> (requires API level 28):</p> <pre><code>imageView.load(\"/path/to/video.mp4\") {\n    videoFrameIndex(1234)  // extracts the 1234th frame of the video\n}\n</code></pre> <p>To select a video frame based on a percentage of the video's total duration, use <code>videoFramePercent</code>:</p> <pre><code>imageView.load(\"/path/to/video.mp4\") {\n    videoFramePercent(0.5)  // extracts the frame in the middle of the video's duration\n}\n</code></pre> <p>If no frame position is specified, the first frame of the video will be decoded.</p> <p>The <code>ImageLoader</code> will automatically detect any videos and extract their frames if the request's filename/URI ends with a valid video extension. If it does not, you can set the <code>Decoder</code> explicitly for the request:</p> <pre><code>imageView.load(\"/path/to/video\") {\n    decoderFactory { result, options, _ -&gt; VideoFrameDecoder(result.source, options) }\n}\n</code></pre>"},{"location":"works_with_coil/","title":"Works with Coil","text":"<p>A collection of third party libraries that work nicely with Coil.</p> <ul> <li>Telephoto: Building blocks for designing media experiences in Compose UI.</li> <li>Landscapist: A pluggable, highly optimized Jetpack Compose and Kotlin Multiplatform image loading library that fetches and displays network images with Glide, Coil, and Fresco.</li> </ul> <p>Have a library that works with or builds on top of Coil? Submit a PR to include it here!</p>"}]}